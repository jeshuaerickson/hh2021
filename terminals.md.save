# Terminals

## Terminal: ExifMetada

(Talk to Piney Sappington)

![](img/exiftool.png)

1. Grep the exiftool result of all files for 12-24 to find suspicious time stamps.
2. Grep the exiftool result of all files for "23:59" and get the line right before it that shows the date the file was created, which is the file name in question.

```
exiftool *.docx | grep 23:59 -B 1
```
![](img/exiftool-answer.png)

## Terminal: Caramel Santaigo

(Talk to Tangle Coalbox)

This is actually an objective. See the Caramel Santaigo objective.


## Terminal: Grepping for Gold

(Talk to Greasy Gopherguts)

** Answer all the questions in the quizme executable: **

** What port does 34.76.1.22 have open? **

  	cat bigscan.gnmap | grep 34.76.1.22

  Answer: 62078

** What port does 34.77.207.226 have open? **

	cat bigscan.gnmap | grep 34.77.207.226

Answer: 8080

** How many hosts appear "Up" in the scan? **

	cat bigscan.gnmap | grep Up | wc -l  

Answer: 26054

** How many hosts have a web port open?  (Let's just use TCP ports 80, 443, and 8080) **

	cat bigscan.gnmap | grep http | wc -l

Answer: 14372

** How many hosts with status Up have no (detected) open TCP ports? **

Subtract tcp from Up

	cat bigscan.gnmap | grep Up | wc -l 
	cat bigscan.gnmap | grep tcp | wc -l

Answer: 402

** What's the greatest number of TCP ports any one host has open? **

	cat bigscan.gnmap | awk '/80\/open/ {print $17}' | grep open 

The 17th column shows the 12th open port and this is the last one that any host displays.

Answer: 12 


## Terminal: Logic Munchers

My son did this for me. He just went around as fast as he could with his mad gaming skills and grabbed every true thing he could find before the trolls got him.

## Terminal: IPv6 Sandbox

Use hints from this Gist: 

https://gist.github.com/chriselgee/c1c69756e527f649d0a95b6f20337c2f 

We need to find the machine where the password is located. 

** Look for addresses in your subnet: **

** ping6 ff02::1 -c2 ** 

- fe80::42:57ff:fe11:b28%eth0 
- fe80::42:c0ff:fea8:a002%eth0

![](img/ipv6-arp1.png)

** Run nmap to see what ports they have open: **

** nmap -6 fe80::42:57ff:fe11:b28%eth0 ** 
	
- 22/tcp, 3000/tcp 

![](img/ipv6-nmap1.png)
		
** nmap -6 fe80::42:c0ff:fea8:a002%eth0 ** 
		
- 80/tcp, 9000/tcp 
[

** Hit the cslistener service with netcat: **
		
** nc -6 fe80::42:c0ff:fea8:a002%eth0 9000 **
	
password: ** PieceOnEarth **

## Terminal: Santa's Holiday Hero

Chimney Scissorsticks in Netwars Area

![](img/holiday-hero-1.png)

My son came in and told me to do the following:

- Don't spam the controls
- Don't keep hitting after notes after they've passed
- "Dad, you're lucky you got a good partner." (Apparently I'm not very good at this.)

## Terminal: Frostavator

TO DO: Complete the explanation of this terminal challenge. Figure out how to explain with respect to Frostavator.

This is an XOR gate challenge. Some notes:

![XOR Gate](img/xor-gate.png)
![AND Gate](img/and-gate.png)
![XNOR Gate](img/xnor-gate.png)
![NAND Gate](img/nand-gate.png)
![NOR Gate](img/nor-gate.png)
![OR Gate](img/or-gate.png)


![](img/frostavator-1.png)


## Terminal: Ho Ho ... No

```
echo "[custom_jail]

enabled = true
logpath = /var/log/hohono.log
findtime = 60m
maxretry = 10
bantime = 30m
filter = custom_filter
action = custom_action
" > /etc/fail2ban/jail.d/custom_jail.conf

echo "[Definition]

actionban   = /root/naughtylist add <ip> 
actionunban = /root/naughtylist del <ip> 

" > /etc/fail2ban/action.d/custom_action.conf

echo "[Definition]

failregex = [Ll]ogin from <HOST> rejected
            [Ff]ailed login from <HOST> for
            [Ii]nvalid heartbeat\s'([^']*)'\sfrom\s<HOST>
            <HOST> sent a malformed request
" > /etc/fail2ban/filter.d/custom_filter.conf

cat /etc/fail2ban/jail.d/custom_jail.conf
cat /etc/fail2ban/filter.d/custom_filter.conf
cat /etc/fail2ban/action.d/custom_action.conf

fail2ban-regex /var/log/hohono.log /etc/fail2ban/filter.d/custom_filter.conf

service fail2ban restart

/root/naughtylist refresh
```

![](img/hohono-result.png)

## Terminal: Yara Analysis

cat ./yara_rules/rules.yar

**cat ./yara_rules/rules.yar | grep 'yara_rule_135 {' -A 10 **

```
meta:
      description = "binaries - file Sugar_in_the_machinery"
      author = "Sparkle Redberry"
      reference = "North Pole Malware Research Lab"
      date = "1955-04-21"
      hash = "19ecaadb2159b566c39c999b0f860b4d8fc2824eb648e275f57a6dbceaf9b488"
   strings:
      $s = "candycane"
   condition:
      $s
 ```

**cat ./yara_rules/rules.yar | grep 'yara_rule_1056 {' -A 10 ** 
 
```
rule yara_rule_1056 {
   meta: 
        description = "binaries - file frosty.exe"
        author = "Sparkle Redberry"
        reference = "North Pole Malware Research Lab"
        date = "1955-04-21"
        hash = "b9b95f671e3d54318b3fd4db1ba3b813325fcef462070da163193d7acb5fcd03"
    strings:
        $s1 = {6c 6962 632e 736f 2e36}
        $hs2 = {726f 6772 616d 2121}
    condition:
        all of them
}
```

**cat ./yara_rules/rules.yar | grep 'yara_rule_1732 {' -A 10 **  
 
 ```
 rule yara_rule_1732 {
   meta:
      description = "binaries - alwayz_winter.exe"
      author = "Santa"
      reference = "North Pole Malware Research Lab"
      date = "1955-04-22"
      hash = "c1e31a539898aab18f483d9e7b3c698ea45799e78bddc919a7dbebb1b40193a8"
   strings:
      $s1 = "This is critical for the execution of this program!!" fullword ascii
      $s2 = "__frame_dummy_init_array_entry" fullword ascii
      $s3 = ".note.gnu.property" fullword ascii
      $s4 = ".eh_frame_hdr" fullword ascii
      $s5 = "__FRAME_END__" fullword ascii
      $s6 = "__GNU_EH_FRAME_HDR" fullword ascii
      $s7 = "frame_dummy" fullword ascii
      $s8 = ".note.gnu.build-id" fullword ascii
      $s9 = "completed.8060" fullword ascii
      $s10 = "_IO_stdin_used" fullword ascii
      $s11 = ".note.ABI-tag" fullword ascii
      $s12 = "naughty string" fullword ascii
      $s13 = "dastardly string" fullword ascii
      $s14 = "__do_global_dtors_aux_fini_array_entry" fullword ascii
      $s15 = "__libc_start_main@@GLIBC_2.2.5" fullword ascii
      $s16 = "GLIBC_2.2.5" fullword ascii
      $s17 = "its_a_holly_jolly_variable" fullword ascii
      $s18 = "__cxa_finalize" fullword ascii
      $s19 = "HolidayHackChallenge{NotReallyAFlag}" fullword ascii
      $s20 = "__libc_csu_init" fullword ascii
   condition:
      uint32(1) == 0x02464c45 and filesize < 50KB and
      10 of them
```

** truncate -s +100000 the_critical_elf_app **

```
./the_critical_elf_app 
./the_critical_elf_app: error while loading shared libraries: libc/so.6: cannot open shared object file: No such file or directory
Machine Running.. 
Toy Levels: Very Merry, Terry
Naughty/Nice Blockchain Assessment: Untampered
Candy Sweetness Gauge: Exceedingly Sugarlicious
Elf Jolliness Quotient: 4a6f6c6c7920456e6f7567682c204f76657274696d6520417070726f766564
```

### Terminal: IMDS Exploration

curl http://169.254.169.254/latest/meta-data/iam/security-credentials/elfu-deploy-role

curl http://169.254.169.254/latest/meta-data/iam/security-credentials/elfu-deploy-role
{
        "Code": "Success",
        "LastUpdated": "2021-12-02T18:50:40Z",
        "Type": "AWS-HMAC",
        "AccessKeyId": "AKIA5HMBSK1SYXYTOXX6",
        "SecretAccessKey": "CGgQcSdERePvGgr058r3PObPq3+0CfraKcsLREpX",
        "Token": "NR9Sz/7fzxwIgv7URgHRAckJK0JKbXoNBcy032XeVPqP8/tWiR/KVSdK8FTPfZWbxQ==",
        "Expiration": "2026-12-02T18:50:40Z"
		
curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/placement/region		
		

TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"`

'curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/placement/region'

